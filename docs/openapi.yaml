openapi: 3.0.2
info:
    title: Data Exchange Catalogue Server APIs
    version: 4.0.0
    description: >
        # Introduction
        
        The Catalogue is DXs' (Data Exchange) dataset discovery portal and metadata store. 

        It enables *Providers* of datasources to describe them with DX based annotations

        to make discovery and consumption of data both automatable and semantically describable. 

        For search and discovery, it allows users to search through text and geo-based queries.

        The catalogue is a [JSON-LD](https://json-ld.org/) document stored and based on the
        [RDF](https://www.w3.org/RDF/) information exchange model. 
        
        
        # Configurations
        
        - **Server**: 
          - In the doc, we display the server url to be https://example-cat.com with the hostname as example-cat.com
          - This could be configured according to the deployment
        - **Base path**:
          - Base path is the path on which API is served, relative to the host
          - It is the initial part of the API
          - Currently, `/iudx/cat/v1` is being used as base path
          - This value could be configured according to the deployment
        - **Request Samples**:
          - The `<tokeValue>` in the header of request sample could be replaced with respective token value that could be obtained from DX Auth Server
          - The `<payload>` in the request sample could be replaced with the payload given adjacent to the request sample
          - The payload contains `<some_item_id>`, `<provider_id>`, `<some_item_name>` for which the appropriate values could be added 
        
         # API HTTP Responses
        Apart from the response codes specified in each API,

        the API server may respond with certain 4xx and 5xx error codes which are related to common API
        Gateway behaviours.

        The application should address them accordingly.
    contact:
        name: For support contact IUDX Team at
        email: support@iudx.org.in
servers:
     -  url: 'https://example-cat.com/iudx/cat/v1'
        description: Production Instance

paths:
    /search:
        get:
            tags:
                - Discovery
            parameters:
                -
                    name: property
                    description: >-
                        Array of properties (strings) on which query is to be made. A logical "and" is
                        performed between the properties. Only a maximum of 4 properties are allowed to be
                        queried at once. The mapping between a property and a value is one-to-one. The only
                        allowed properties to be queried are per the vocabulary schema mentioned in each
                        sub-Class of [IUDXEntity](https://voc.iudx.org.in/IUDXEntity).
                    schema:
                        maxItems: 4
                        minItems: 1
                        uniqueItems: true
                        type: array
                        items:
                            type: string
                    in: query
                -
                    name: value
                    description: >-
                        Values of the one-to-one mapped strings in property. A logical "or" is performed for
                        each value which is mapped to a property. For each property, only a maximum of 4
                        values are allowed. For e.g for property=[id,type] then value=[[<some-id>],
                        [<some-type>]].
                    schema:
                        maxItems: 4
                        minItems: 1
                        uniqueItems: true
                        type: array
                        items:
                            type: string
                    in: query
                    required: false
                -
                    name: geoproperty
                    description: Name of the property if the query is on a geospatial property.
                    schema:
                        enum:
                            - location
                            - geocovers
                        type: string
                    in: query
                -
                    name: georel
                    description: Type of geoquery
                    schema:
                        enum:
                            - within
                            - intersects
                        type: string
                    in: query
                    required: false
                -
                    name: geometry
                    description: Geometry of the geo-query
                    schema:
                        enum:
                            - Point
                            - Polygon
                            - LineString
                            - bbox
                        type: string
                    in: query
                -
                    name: coordinates
                    description: >-
                        Coordinates for the specific query type. For e.g, [[1,2], [3,4]]. Note: The data-type
                        of this field is a string, therefore the coordinates are a string encoded
                        multidimensional array.Precision supported is 6 decimal places.
                    schema:
                        format: double
                        maxItems: 10
                        minItems: 1
                        type: array
                        items:
                            type: number
                    in: query
                    required: false
                -
                    name: maxDistance
                    description: Maximum distance from center point in meters
                    schema:
                        maximum: 10000
                        minimum: 0
                        type: number
                    in: query
                    required: false
                -
                    name: q
                    description: query for text/fuzzy search.
                    schema:
                        maxLength: 100
                        minLength: 1
                        type: string
                    in: query
                    required: false
                -
                    name: limit
                    description: Limit number of records in search response.
                    schema:
                        maximum: (10000 - offset)
                        minimum: 1
                        type: integer
                    in: query
                    required: false
                -
                    name: offset
                    description: Offset from where the next batch of results should be returned.
                    schema:
                        maximum: (9999 - limit)
                        type: integer
                    in: query
                    required: false
                -
                    name: filter
                    description: Filter properties to display. This is an array of strings.
                    schema:
                        maxItems: 10
                        minItems: 0
                        type: array
                        items:
                            type: string
                    in: query
                -
                    name: instance
                    description: >-
                        DX instance on which this query is to be made. Don't mention this if search on
                        entire catalogue is to be made. Else mentioning a specific instance name here
                        restricts search only to that instance.
                    schema:
                        type: string
                        example: 'pune, surat, varanasi'
                    in: header
                    required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: All the query parameters yielded results.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                            examples:
                                Invalid Query Param:
                                    value:
                                        type: 'urn:dx:cat:InvalidQueryParam'
                                        title: Generic invalid query param error
                                Invalid Geo Param:
                                    value:
                                        type: 'urn:dx:cat:InvalidGeoParam'
                                        title: Geoquery parameter error
                                Invalid Geo Value:
                                    value:
                                        type: 'urn:dx:cat:InvalidGeoValue'
                                        title: Geoquery value error
                                Invalid Syntax:
                                    value:
                                        type: 'urn:dx:cat:InvalidSyntax'
                                        title: Invalid Syntax
                                Internal Error:
                                    value:
                                        type: 'urn:dx:cat:InternalError'
                                        title: Internal error
                                Operation not allowed:
                                    value:
                                        type: 'urn:dx:cat:OperationNotAllowed'
                                        title: Operation not allowed
                    description: Bad query.
            operationId: search
            description: >
                Generic catalogue search query. Searches for entites that meet the

                query criteria. The search enpoint allows one to query a particular property of an

                entity, or by its geo-location annotation, or by a full text-search or a combination of

                all three.

                #### Property Search

                One may combine multiple properties in a search through a logical "&". For each such property

                multiple possible values may be given. The syntax for a property query is -

                `property=[<prop-1>,<prop-2>]&value=[[<prop-1-val-1>,<prop-1-val-2>],[<prop-2-val-1>]]`

                Property search can be applied to only certain properties. These properties defined in the
                DX Schema Vocalbulary for all subClasses of [IUDXEntity](https://voc.iudx.org.in/IUDXEntity)

                These perform exact matches in the case of keywords such as

                `id`, `resourceGroup`, `provider`, `resourceServer`, `type`

                and approximate matches (text based) for all other properties.

                Some common uses are 
                  - tags: `property=[tags]&value=[[aqm,pollution]]`
                  - by type of entity: `property=[type]&value=[[iudx:ResourceGroup]]`. Valid entities are `iudx:Resource`, `iudx:ResourceGroup`, `iudx:Provider`, `iudx:ResourceServer`.
                  - a combination: `property=[tags,type]&value=[[aqm,pollution], [iudx:ResourceGroup]]
                  - resource belonging to a group: `property=[resourceGroup]&value=[[<group-id>]]`

                #### Geo Search

                Geo search accepts geojson based queries. The params and their accepted values are -
                  - geoproperty: Which geoproperty to query. Default is `location`.
                  - georel: Geo-relationship. One of `within`, `disjoint`, `intersects`.
                  - geometry: GeoJson geometries. One of `Point`(point and circle), `Polygon`, `LineString`(for interseaction with points and polygons), `bbox`.
                      - Point: Point and radius query
                          - coordinates: The center point of the circle, for e.g, `[73,13]` (lon and lat)
                          - maxDistance: Radius from the center point in meters, for e.g `100`
                          - georel: `within`
                      - Polygon: Polygon/Multi-Polygon query
                          - coordinates: Coordinates of the polygon/s, for e.g, `[[[73,13],[73,12],[73,13]]]`.  Note, (lon and lat) and the first coordinate must be same as last.
                          - georel: `within, intersects, disjoint`
                      - LineString: Multi line string
                          - coordinates: Coordinates of the multi-line, for e.g, `[[73,13],[74,15],[75,16]]`. 
                          - georel: `intersects`
                      - bbox: Bounding box
                          - coordinates: `[[top-left],[bottom-right]]`, `[[73,13],[74,12]]`. 
                          - georel: `within`

                #### Text search

                This is a fuzzy full text based search. It searches across all entity types.
                  - q: Text to be queried

                #### Complex search

                A combination of the above is allowed to make searches more  complex.


                #### Limits and filters
                  - Documents returned can be limited by specifying a limit and offset. For e.g, `limit=100&offset=10` gives 100 documents from the 10th search result.
                  - A subset of properties of returned documents can be filtered out. For e.g, `filter=[id]` returns documents with only the `id` property retained in them.
                  - The sum of `offset` and `limit` should `<= 10000`, i.e. if the `offset=100`, then max `limit` should be `9900` and so on.
            x-codeSamples:
                -
                    lang: cURL
                    label: 'tag search'
                    source: |
                        curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?property="[tags]"&value="[[pollution]]"&filter=[id,tags]&limit=100&offset=0'
                -
                    lang: cURL
                    label: 'search by circle'
                    source: |
                        curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]'
                - lang: cURL
                  label: 'search by polygon'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]'
                - lang: cURL
                  label: 'search by linestring'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]'
                - lang: cURL
                  label: 'search by bbox'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.8420,18.5305],[73.8665,18.5126]]'
                -
                    lang: cURL
                    label: 'search by text'
                    source: |
                        curl --location --request GET 'https://example-cat.com/iudx/cat/v1/search?q="Bosch Climo"'
                -
                    lang: cURL
                    label: 'complex search'
                    source: |
                        curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[tags,id,location.geometry.coordinates]'
    /count:
        get:
            tags:
                - Discovery
            parameters:
                - name: property
                  description: |
                      Array of properties (strings) on which query is to be made. A logical "and" is
                      performed between the properties. Only a maximum of 4 properties are allowed to be
                      queried at once. The mapping between a property and a value is one-to-one. The only
                      allowed properties to be queried are per the vocabulary schema mentioned in each
                      sub-Class of [IUDXEntity](https://voc.iudx.org.in/IUDXEntity).
                  schema:
                      maxItems: 4
                      minItems: 1
                      uniqueItems: true
                      type: array
                      items:
                          type: string
                  in: query
                - name: value
                  description: |
                      Values of the one-to-one mapped strings in property. A logical "or" is performed for
                      each value which is mapped to a property. For each property, only a maximum of 4
                      values are allowed. For e.g for property=[id,type] then value=[[<some-id>],
                      [<some-type>]].
                  schema:
                      maxItems: 4
                      minItems: 1
                      uniqueItems: true
                      type: array
                      items:
                          type: string
                  in: query
                  required: false
                - name: geoproperty
                  description: Name of the property if the query is on a geospatial property.
                  schema:
                      enum:
                          - location
                          - geocovers
                      type: string
                  in: query
                - name: georel
                  description: Type of geoquery
                  schema:
                      enum:
                          - within
                          - intersects
                      type: string
                  in: query
                  required: false
                - name: geometry
                  description: Geometry of the geo-query
                  schema:
                      enum:
                          - Point
                          - Polygon
                          - LineString
                          - bbox
                      type: string
                  in: query
                - name: coordinates
                  description: |
                      Coordinates for the specific query type. For e.g, [[1,2], [3,4]]. Note: The data-type
                      of this field is a string, therefore the coordinates are a string encoded
                      multidimensional array.Precision supported is 6 decimal places.
                  schema:
                      format: double
                      maxItems: 10
                      minItems: 1
                      type: array
                      items:
                          type: number
                  in: query
                  required: false
                - name: maxDistance
                  description: Maximum distance from center point in meters
                  schema:
                      maximum: 10000
                      minimum: 0
                      type: number
                  in: query
                  required: false
                - name: q
                  description: query for text/fuzzy search.
                  schema:
                      maxLength: 100
                      minLength: 1
                      type: string
                  in: query
                  required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: All the query parameters yielded results.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                            examples:
                                Invalid Query Param:
                                    value:
                                        type: 'urn:dx:cat:InvalidQueryParam'
                                        title: Generic invalid query param error
                                Invalid Geo Value:
                                    value:
                                        type: 'urn:dx:cat:InvalidGeoValue'
                                        title: Geoquery value error
                                Invalid Syntax:
                                    value:
                                        type: 'urn:dx:cat:InvalidSyntax'
                                        title: Invalid Syntax
                                Internal Error:
                                    value:
                                        type: 'urn:dx:cat:InternalError'
                                        title: Internal error
                    description: Bad query.
            operationId: count
            description: >
                Count APIs get the total number of hits for the given API request containing the provided query parameters.
            x-codeSamples:
                - lang: cURL
                  label: 'count tags'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?value=[[pollution]]&property=[tags]'
                - lang: cURL
                  label: 'count by circle'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.9,18.6]'
                - lang: cURL
                  label: 'count by polygon'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]'
                - lang: cURL
                  label: 'count by linestring'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]'
                - lang: cURL
                  label: 'count by bbox'
                  source: |
                      curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73,20],[75,18]]'
                - lang: cURL
                  label: 'count by text'
                  source: |
                      curl --location --request GET 'https://example-cat.com/iudx/cat/v1/count?q="Bosch Climo"'

    /list/{type}:
        description: >
            List entities of a certain type or list all possible values of a property(tags only). 

            If entites, then type must be `resourceGroup`, `resourceServer`, `provider`.

            If properties then only `tags` is supported.

            All documents in the catalogue are of type [IUDXEntity](https://voc.iudx.org.in/IUDXEntity).

            The entities referenced as the name mentioned in above link in camel case with small case
            starting.

            This endpoint essentially lists those entities (except Resource which will be too numerous. In
            addition, you may also list all the instances by 

            specifying instance instead of an entity identified.

            Adding `instance` in header will restrict the list to only that specific instance.
        get:
            tags:
                - List
            parameters:
                -
                    name: instance
                    description: >
                        DX instance on which this query is to be made. Don't mention this is list on entire
                        catalogue is to be made. Else mentioning a specific instance name here restricts
                        search only to that instance.
                    schema:
                        type: string
                        example: 'pune, surat, varanasi'
                    in: header
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                            examples:
                                Syntax Error:
                                    value:
                                        totalHits: 0
                                        results:
                                            - {}
                                        type: 'urn:dx:cat:InvalidSyntax'
                                        title: Invalid Syntax
                    description: Fail
            operationId: list-types
            description: List a particular type
            x-codeSamples:
                -
                    lang: cURL
                    label: 'by tags'
                    source: |
                        https://api.catalogue.iudx.org.in/iudx/cat/v1/list/tags
                -
                    lang: cURL
                    label: 'by resourceGroup'
                    source: |
                        https://api.catalogue.iudx.org.in/iudx/cat/v1/list/resourceGroup
                -
                    lang: cURL
                    label: 'by provider'
                    source: |
                        https://api.catalogue.iudx.org.in/iudx/cat/v1/list/provider
        parameters:
            -
                name: type
                description: >-
                    If entites, then type must be resource, resourceGroup, resourceServer, provider. If
                    properties then only tags is supported. Additionally all instances can also be mentioned
                    as `instance`.
                schema:
                    maxLength: 50
                    minLength: 4
                    enum:
                        - tags
                        - resourceServer
                        - resourceGroup
                        - instance
                        - provider
                    type: string
                in: path
                required: true
            -
                name: instance
                description: >-
                    DX instance on which this query is to be made. Don't mention this if list on entire
                    catalogue is to be made. Else mentioning a specific instance name here restricts search
                    only to that instance.
                schema:
                    type: string
                in: header
                required: false
    /item:
        description: >
            Operations on a specific catalogue entity. This endpoint is used to create/update/read/delete a
            catalogue DX Entity.
        get:
            tags:
                - Entity
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Found the item.
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseForGetEntity'
                    description: Didn't find the item.
            operationId: get-item
            description: Get an item given the id
            x-codeSamples:
                -
                    lang: cURL
                    label: 'item by id'
                    source: |
                        curl --location --request GET 'https://example-cat.com/iudx/cat/v1/item?id=datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io/aqm-bosch-climo/Pune Railway Station_2811'
        put:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exapmleEntityWId'
                required: true
            tags:
                - Entity
            parameters:
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/updateItemResponse'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/updateItemBadRequest'
                    description: Bad Request
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                            examples:
                                Unauthorized:
                                    value:
                                        type: 'urn:dx:cat:InvalidAuthorizationToken'
                                        title: Token is invalid
                                        detail: failed
                    description: Unauthorized access
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/updateItemNotFound'
                    description: Document doesn't exist to update it
            operationId: update-item
            description: >
                Update an item where the body contains a fully valid item with id. Relationship links like

                provider, resourceGroup, resourceServer and "name" are not allowed to be updated. itemStatus
                is added by backend.

                Items maybe subClasses of type [IUDXEntity](https://voc.iudx.org.in/IUDXEntity). Depedning on
                this, some properties maybe mandatory.

                The json schema for the different types can be found
                [here](https://github.com/datakaveri/iudx-catalogue-server/tree/master/src/main/resources/iudx/catalogue/server/validator).
                In the future, we will serve schemas from our own servers.

                #### Non-updateable fields

                In case update of these fields is required, it is recommended to delete the item

                and re-upload it.

                1. iudx:Resource
                   - id
                   - provider
                   - resourceGroup
                   - name 
                   - type (1st element in array non-modifiable)
                   - itemStatus

                2. iudx:ResourceGroup
                   - id
                   - name
                   - provider
                   - resouceServer
                   - type (1st element in array non-modifiable)
                   - itemStatus
                
                3. iudx:ResourceServer
                   - id
                   - provider
                   - type (1st element in array non-modifiable)
                   - itemStatus
                
                4. iudx:Provider
                   - id
                   - type (1st element in array non-modifiable)
                   - itemStatus
            x-codeSamples:
                -
                    lang: cURL
                    label: 'update item'
                    source: |
                        curl --location --request PUT 'https://example-cat.com/iudx/cat/v1/item/' \
                        --header 'token: <tokenValue>' \
                        --header 'Content-Type: application/json' \
                        --data-raw '<payload>'
        post:
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleEntityWoID'
                required: true
            tags:
                - Entity
            parameters:
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                            examples:
                                Create Success:
                                    value:
                                        type: 'urn:dx:cat:Success'
                                        results:
                                            -
                                                id: >-
                                                    datakaveri.org/f7e044eee8122b5c87dce6e7ad64f3266afa41dc/rs.iudx.io
                                                method: update
                                                title: 'urn:dx:cat:Success'
                    description: Successfully inserted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                            examples:
                                Schema Validation Failure:
                                    value:
                                        {
                                            "type": "urn:dx:cat:InvalidSchema",
                                            "title": "Invalid Schema",
                                        }
                                Link Validation Failure:
                                    value:
                                        type: 'urn:dx:cat:LinkValidationFailed'
                                        title: Link Validation Failed
                    description: Invalid document
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                            examples:
                                Unauthorized:
                                    value:
                                        type: 'urn:dx:cat:InvalidAuthorizationToken'
                                        title: Token is invalid
                                        detail: failed
                    description: Unauthorized access
            operationId: create-item
            description: >
                Insert an item into the catalogue where the item's body specifies the type of item and
                instance name. id and itemStatus are added by server. Items maybe subClasses of type
                [IUDXEntity](https://voc.iudx.org.in/IUDXEntity). Depedning on this, some properties maybe
                mandatory. The json schema for the different types can be found
                [here](https://github.com/datakaveri/iudx-catalogue-server/tree/master/src/main/resources/iudx/catalogue/server/validator).
                In the future, we will serve schemas from our own servers.
            x-codeSamples:
                -
                    lang: cURL
                    label: 'create item'
                    source: |
                        curl --location --request POST 'https://example-cat.com/iudx/cat/v1/item/' \
                        --header 'token: <tokenValue>' \
                        --header 'Content-Type: application/json' \
                        --data-raw '<payload>'
        delete:
            tags:
                - Entity
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                            examples:
                                Delete Success:
                                    value:
                                      {
                                          "type": "urn:dx:cat:Success",
                                          "title": "Success",
                                          "results": [
                                              {
                                                  "id": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests/ppoi_2",
                                                  "method": "delete",
                                                  "title": "urn:dx:cat:Success"
                                              }
                                          ]
                                      }
                    description: Successfully deleted
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/unAuthorizedAccess'
                    description: Unauthorized access
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Didn't find the item
            operationId: delete-item
            description: Delete an item
            x-codeSamples:
                -
                    lang: cURL
                    label: 'delete item'
                    source: |
                        curl --location --request DELETE 'https://example-cat.com/iudx/cat/v1/item?id=datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests/ppoi_2' \
                        --header 'token: <tokenValue>'

    /relsearch:
        description: >-
            Catalogue relationship search. This is much like normal search except the query explores
            properties that resides inside a related entity.

            For e.g, for  a Resource entity -> Doc A - {id: some-id, provider: example-provider-id}, and
            Provider entity -> Doc B- {id: example-provider-id, name: some-name},

            this api allows you to make a query saying provider.name=some-name which will return Doc A.
        get:
            tags:
                - Relationship
            parameters:
                -
                    name: relationship
                    description: |
                        Relationship attribute on which the query is to be made. For
                        e.g, entities whose related provider entity's name needs to match xyz will
                        have this field as "[provider.name]". The relationship is enclosed in [].
                        If there are two relationships, then they must be comma separated. For e.g,
                        [provider.name, resourceGroup.name].
                    schema:
                        type: array
                        items:
                            type: string
                    in: query
                    required: false
                -
                    name: value
                    description: >-
                        Value of the relationhsip. Multiple values for a single relationship are supported,
                        for e.g, [[val1, val2]].

                        If multiple relationships are specified, then their values will occur as so -
                        [[rel1-val1],[rel2-val1]]
                    schema:
                        type: array
                        items:
                            type: string
                    in: query
                    required: false
                -
                    name: instance
                    description: >-
                        DX instance on which this query is to be made. Don't mention this if relsearch on
                        entire catalogue is to be made. Else mentioning a specific instance name here
                        restricts search only to that instance.
                    schema:
                        maxLength: 100
                        minLength: 0
                        type: string
                        example: 'pune, surat, varanasi'
                    in: header
                    required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: All the query parameters yielded results.
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                            examples:
                                Invalid Syntax:
                                    value:
                                        totalHits: 0
                                        results:
                                            - {}
                                        type: 'urn:dx:cat:InvalidSyntax'
                                        title: Invalid Syntax
                    description: Bad query.
            operationId: relationship-search
            description: 'Search related items in the catalogue '
            x-codeSamples:
                -
                    lang: cURL
                    label: 'search inside relationship'
                    source: >
                        https://api.catalogue.iudx.org.in/relsearch?relationship="[provider.name]"&value="[[IUDXAdmin]]"
    /relationship:
        get:
            description: >-
                This API allows one to retrieve documents which are connected by certain relationship attribute in
                an entity. It allows one to fetch an entity/entities that are immediate neighbor(s) of the input
                entity.
                
                To explain this API better we provide an illustrative catalogue graph connecting different
                catalogue entities below: 
                
                ```
                                          forward relationship
                                       ───────────────────►
                
                                                                         ┌─────────────────┐
                ┌───────────────┐                              provider  │                 │
                
                │               │ resourceGroup                    ┌─────►Provider PA      │
                
                │ Resource A    ├─────┐                            │     │                 │
                
                │               │     │    ┌─────────────────┐     │     └─────────────────┘
                
                └───────────────┘     │    │ ResourceGroup   ├─────┘
                                      └────► RG1             │
                ┌───────────────┐          │                 │
                
                │               │      ┌───►                 ├─────┐    ┌─────────────────┐
                
                │ Resource B    │      │   └─────────────────┘     │    │                 │
                
                │               ├──────┘                           │    │ResourceServer RS│
                
                └───────────────┘  resourceGroup                   └────►                 │
                                                                        └─────────────────┘
                                                           resourceServer
                
                
                
                                       ◄────────────────────
                                           inverse relationship
                ```   
                
                Given a resource item, say Resource A, one may want to retrieve the resource group item associated
                with it. Similarly, given a resource group item, say RG1, one may want to retrieve all resource
                entities that belong to this resource group. In the above example, the API should return resource
                entities A and B.
                
                The following table shows applicable queries for different entities.
                
                
                
                | Type of the entity (id) | Supported relationships for "rel"       |
                Description                                             |
                
                |-------------------------|-----------------------------------------|-------------------------------------------------------------------------------------------------------------------------------|
                
                | Resource                | resourceGroup,resourceServer,  provider | Return the associated
                resourceGroup (or resourceServer or provider) entity. Only single entity is returned.             
                
                | ResourceGroup           | resource                                | Return all resource items
                associated with the input resource group. Multiple entities may be returned.                      
                |
                
                | ResourceGroup           | resourceServer, provider                | Return the associated
                resourceServer (or provider) entity. Only single entity is returned.                              
                |
                
                | Provider                | resource, resourceGroup                 | Return all resource or
                resource group items associated with the input provider. Multiple entities maybe
                returned.                  |
                
                | ResourceServer          | resource, resourceGroup                 | Return all resource or
                resource group items associated with the input resource server. Multiple entities maybe
                returned.           |
                
                

            tags:
                - Relationship
            parameters:
                -
                    name: rel
                    summary: Relationship attribute of the entity whose id is provided
                    schema:
                        enum:
                            - provider
                            - resourceGroup
                            - resourceServer
                            - instance
                        type: string
                    in: query
                    required: true
                -
                    name: id
                    description: id of the entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Success
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                            examples:
                                Invalid Syntax:
                                    value:
                                        totalHits: 0
                                        results:
                                            - {}
                                        type: 'urn:dx:cat:InvalidSyntax'
                                        title: Invalid Syntax
                    description: Item oor relationship doesn't exist
            operationId: get-related-entity
            x-codeSamples:
                -
                    lang: cURL
                    label: 'search by relationship'
                    source: |
                        https://api.catalogue.iudx.org.in/relationship?id=<some-entity-id>&rel=resourceGroup
        parameters:
            -
                name: id
                description: ID of the entity
                schema:
                    type: string
                in: query
                required: true
            -
                name: rel
                description: Relationship attribute of the entity whose id is provided
                schema:
                    type: string
                in: query
                required: true
            -
                name: instance
                description: >-
                    DX instance on which this query is to be made. Don't mention this if relationship search
                    on entire catalogue is to be made. Else mentioning a specific instance name here restricts
                    search only to that instance.
                schema:
                    type: string
                in: header
                required: false
    /instance:
        description: >-
            A catalogue administrator api to set an instance (grouping) which will be reflected on the
            catalogue ui.
        post:
            tags:
                - Administrator
            parameters:
                -
                    name: id
                    description: |
                        id of the instance. In most cases this is a city name.
                    schema:
                        type: string
                    in: query
                    required: true
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        maxLength: 512
                        minLength: 0
                        pattern: '^[a-zA-Z0-9\/\@\.]*$'
                        type: string
                    in: header
                    required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Successfully inserted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Invalid document
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Unauthorized access
            operationId: create-instance
            description: Create an DX instance
        delete:
            tags:
                - Administrator
            parameters:
                -
                    name: id
                    description: |
                        id of the instance. In most cases this is a city name.
                    schema:
                        type: string
                    in: query
                    required: true
                -
                    name: token
                    description: DX Auth token to process the request
                    schema:
                        type: string
                    in: header
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Successfully deleted
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Unauthorized access
                '404':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Instance doesn't exist
            operationId: delete-instance
            description: Delete an DX instance
    /consumer/ratings:
        description: >-
            A catalogue consumer api to assign rating/review to a resource item, which will be reflected on the ui.

        post:
            tags:
                - Consumer
            operationId: create-rating-object
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleRating'
                required: true
            responses:
                '201':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Successfully inserted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Invalid document
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Unauthorized access
            description: >-
                Create a rating object for a resource item.
                
                  ` A consumer can provide a rating for a resource item only if they have queried the resource from the DX Resource Server a min number of times. For eg: 100 API calls. `
            x-codeSamples:
                -
                    lang: cURL
                    label: 'create rating'
                    source: |
                        https://api.catalogue.iudx.org.in/consumer/ratings?id=<some-entity-id>
        

        put:
            tags:
                - Consumer
            operationId: update-rating-object
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/exampleRating'
                required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Successfully inserted
                '400':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Invalid document
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Unauthorized access
            description: Update a rating object of a resource item
            x-codeSamples:
                -
                    lang: cURL
                    label: 'update rating'
                    source: |
                        https://api.catalogue.iudx.org.in/consumer/ratings?id=<some-entity-id>
        get:
            tags:
                - Consumer
            operationId: get-ratings
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
                -
                    name: type
                    description: Get all ratings or average rating based on type
                    schema:
                        enum:
                            - average
                            - group
                        type: string
                    in: query
                    required: false
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Success
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Unauthorized access
            description: >-
                Get a rating, all ratings or average rating for a resource or for a resource group
            x-codeSamples:
                -
                    lang: cURL
                    label: 'get rating by user'
                    source: |
                        https://api.catalogue.iudx.org.in/consumer/ratings?id=<some-entity-id>
                -
                    lang: cURL
                    label: 'get all rating of resource'
                    source: |
                        https://api.catalogue.iudx.org.in/consumer/ratings?id=<some-entity-id>&type=group
                -
                    lang: cURL
                    label: 'get average rating of resource'
                    source: |
                        https://api.catalogue.iudx.org.in/consumer/ratings?id=<some-entity-id>&type=average
        delete:
            tags:
                - Consumer
            operationId: delete-rating-object
            parameters:
                -
                    name: id
                    description: ID of the DX Entity
                    schema:
                        maxLength: 512
                        minLength: 0
                        type: string
                    in: query
                    required: true
            responses:
                '200':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/successResponseWithObjects'
                    description: Success
                '401':
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/errorResponseWithObjects'
                    description: Unauthorized access
            description: delete a rating object for a resource item
            x-codeSamples:
                -
                    lang: cURL
                    label: 'delete rating'
                    source: |
                        https://api.catalogue.iudx.org.in/consumer/ratings?id=<some-entity-id>
components:
    schemas:
        exampleEntityWoID:
            title: Root Type for exampleEntityWoID
            description: An example entity without ID (For first time onboarding)
            type: object
            properties:
                '@context':
                    description: 'JSON-LD context. Default is https://voc.iudx.org.in.'
                    type: string
                name:
                    type: string
                type:
                    description: >
                        JSON-LD type. Must contain the uri of one of the
                        [IUDXEntity](https://voc.iudx.org.in/IUDXEntity) subclasses. May additionally contain
                        a data model uri which can be found [here](https://voc.iudx.org.in/) in the
                        "Data-Models" tab.
                    type: array
                    items:
                        type: string
            example:
              {
                  "@context": "https://voc.iudx.org.in/",
                  "type": [
                      "iudx:Resource",
                      "iudx:EnvAQM"
                  ],
                  "id": "<some_item_id>",
                  "description": "Description for pune Point of interest",
                  "tags": [
                      "environment",
                      " air quality",
                      " climate",
                      " noise",
                      " light",
                      " uv"
                  ],
                  "provider": "<some_provider_id>",
                  "itemStatus": "ACTIVE",
                  "deviceId": "b3ec32ff-fa7d-64fa-c0af-272e25d314e9",
                  "resourceGroup": "<some_provider_id>/rs.iudx.io/pune-point-of-interests",
                  "location": {
                      "type": "Place",
                      "address": "ABD area, Pune",
                      "geometry": {
                          "coordinates": [
                              73.874537,
                              18.528311
                          ],
                          "type": "Point"
                      }
                  },
                  "deviceModel": {
                      "brandName": "Climo",
                      "modelName": "Bosch-Climo",
                      "modelURL": "http://boschclimo.com"
                  },
                  "name": "<some_item_name>"
              }

        exapmleEntityWId:
            title: payload for update item with ID
            description: payload for update item with ID
            required:
                - type
                - name
                - id
                - tags
                - provider
                - resourceGroup
            type: object
            properties:
                '@context':
                    type: string
                type:
                    type: array
                    items:
                        type: string
                id:
                    type: string
                name:
                    type: string
                description:
                    type: string
                tags:
                    type: array
                    items:
                        type: string
                provider:
                    type: string
                itemStatus:
                    type: string
                deviceId:
                    type: string
                resourceGroup:
                    type: string
                location:
                    type: array
                    items:
                        type: string
                deviceModel:
                    type: array
                    items:
                        type: string
            example:
              {
                  "@context": "https://voc.iudx.org.in/",
                  "type": [
                      "iudx:Resource",
                      "iudx:EnvAQM"
                  ],
                  "id": "<some_item_id>",
                  "name": "<some_item_name>",
                  "description": "Description for Bosch-Climo AQM resource 28",
                  "tags": [
                      "New Tag, aqm,flood.test"
                  ],
                  "provider": "<some_provider_id>",
                  "itemStatus": "ACTIVE",
                  "deviceId": "b3ec32ff-fa7d-64fa-c0af-272e25d314e9",
                  "resourceGroup": "<some_provider_id>/rs.iudx.io/pune-point-of-interests",
                  "location": {
                      "type": "Place",
                      "address": "ABD area, Pune",
                      "geometry": {
                          "coordinates": [
                              73.874537,
                              18.528311
                          ],
                          "type": "Point"
                      }
                  },
                  "deviceModel": {
                      "brandName": "Climo",
                      "modelName": "Bosch-Climo",
                      "modelURL": "http://boschclimo.com"
                  }
              }
        successResponseWithObjects:
            title: Root Type for standardResponse
            description: Standard Response for all requests
            required:
                - type
            type: object
            properties:
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
                detail:
                    description: Detailed description of the type or response
                    type: string
                type:
                    description: >-
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
            example:
                totalHits: 10
                results:
                    - {}
                type: 'urn:dx:cat:Success'
                title: Success

        updateItemResponse:
            title: Response for update Item
            description: Success response for update Item with ID
            required:
                - type
            type: object
            properties:
                type:
                    description: >
                        URN type of the response indicating if the query was successful or if any errors have
                        been triggered
                    type: string
                title:
                    description: A human readable title to the message response
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:Success",
                  "title": "urn:dx:cat:Success",
                  "results": [
                      {
                          "id": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests/ppoi_2",
                          "method": "update",
                          "title": "urn:dx:cat:Success"
                      }
                  ]
              }



        errorResponseWithObjects:
            title: Root Type for standardResponse
            description: Standard Response for all requests
            required:
                - type
            type: object
            properties:
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
                detail:
                    description: Detailed description of the type or response
                    type: string
                type:
                    description: >-
                        Type of the response indicating if the query was successful or if any errors have been
                        triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
            example:
                totalHits: 10
                results:
                    - {}
                type: <error urn>
                title: <error title
                detail: <error detail description>

        unAuthorizedAccess:
            title: Common to unauthorized access response
            description: Response for 401 invalid token
            required:
                - type
            type: object
            properties:
                type:
                    description: >
                        Indicates that the token sent in request header is invalid
                    type: string
                title:
                    description: A human readable title to the message response
                detail:
                    description: Detailed description of the type or response
                    type: string
            example:
              {
                  "type": "urn:dx:cat:InvalidAuthorizationToken",
                  "title": "Token is invalid",
                  "detail": "failed"
              }

        updateItemBadRequest:
            title: 400 Bad Request
            description: Update Item Bad Request
            required:
                - type
            type: string
            properties:
                type:
                    description: >
                        Type of the response indicating if the query was successful or if any errors have been
                        triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                detail:
                    description: Detailed description of the type or response
                    type: string
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:InvalidSchema",
                  "title": "Invalid Schema",
                  "detail": "Invalid Schema",
                  "results": [ ]
              }

        updateItemNotFound:
            title: 404 Not Found
            description: Update Item Not Found
            required:
                - type
            type: string
            properties:
                type:
                    description: >
                        Type of the response indicating if the query was successful or if any errors have been
                        triggered
                    type: string
                title:
                    description: A human readable title to the message response
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:ItemNotFound",
                  "title": "Item is not found",
                  "results": [
                      {
                          "id": "datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-point-of-interests/ppoi_2abcdefg",
                          "method": "update",
                          "title": "failed",
                          "detail": "Fail: Doc doesn't exist, can't update"
                      }
                  ]
              }


        errorResponseForGetEntity:
            title: Root Type for standardResponse
            description: Standard Response for all requests
            required:
                - type
            type: object
            properties:
                type:
                    description: >-
                        Type of the response indicating if the query was successful or if any errors have been
                        triggered.
                    type: string
                title:
                    description: A human readable title to the message response.
                totalHits:
                    format: int32
                    description: Total number of documents which matched the query.
                    type: integer
                results:
                    description: Results which matched the query. This is an array of objects.
                    type: array
                    items:
                        type: object
            example:
              {
                  "type": "urn:dx:cat:ItemNotFound",
                  "title": "error",
                  "totalHits": 0,
                  "results": [ ]
              }

        exampleRating:
            title: Root Type for exampleRating
            description: An example rating object for a resource
            type: object
            properties:
                rating:
                    type: number
                comment:
                    type: string
            example:
                rating: 4.3
                comment: some-comment


tags:
    -
        name: Entity
        description: |
            Manage catalogue entities and perform Create/Update/Read/Delete operations on them.
            These apis are intended to be used by DX(Data Exchange) Data *Providers*.
        x-displayName: Entity
    -
        name: Discovery
        description: >
            Discovery DX Entities using a rich discovery api supporting property, text and geo-based
            queries.

            These apis are intended to be used by DX(Data Exchange) Data *Consumers*.
        x-displayName: Discovery
    -
        name: List
        description: |
            List DX Entities of a certain type.
            These apis are intended to be used by User Interfaces.
        x-displayName: List
    -
        name: Relationship
        description: |
            Discovery of entities through their relationships.
            These apis are intended to be used by DX(Data Exchange) Data *Consumers*.
        x-displayName: Relationship
    -
        name: Administrator
        description: |
            Catalogue administrator specific apis.
        x-displayName: Administrator
    -
        name: Consumer
        description: |
            Catalogue consumer specific apis.
        x-displayName: Consumer


