openapi: 3.0.2
info:
  version: '5.0'
  title: Data Exchange Catalogue Server APIs
  description: |
    # Introduction
    The Catalogue is DXs' (Data Exchange) dataset discovery portal and metadata store. 
    It enables *Providers* of datasources to describe them with DX based annotations
    to make discovery and consumption of data both automatable and semantically describable. 
    For search and discovery, it allows users to search through text and geo-based queries.
    The catalogue is a [JSON-LD](https://json-ld.org/) document stored and based on the [RDF](https://www.w3.org/RDF/) information exchange model. 

    # Configurations
    - **Server**: 
      - In the doc, we display the server url to be https://example-cat.com with the hostname as example-cat.com
      - This could be configured according to the deployment
    - **Base path**:
      - Base path is the path on which API is served, relative to the host
      - It is the initial part of the API
      - The base path for [DX AAA Server](https://github.com/datakaveri/iudx-aaa-server) is set to `/auth/v1`
      - Currently, `/iudx/cat/v1` is being used as base path for all the DX Catalogue Server APIs
      - These value could be configured according to the deployment
    - **Request Samples**:
      - The `<token>` in the header of request sample could be replaced with respective token value that could be obtained from DX Auth Server
      - The `<payload>` in the request sample could be replaced with the payload given adjacent to the request sample
      - The payload contains `<some_item_id>`, `<provider_id>`, `<some_item_name>`, for which the appropriate values could be added 

     # API HTTP Responses
    Apart from the response codes specified in each API,
    the API server may respond with certain 4xx and 5xx error codes which are related to common API Gateway behaviours.
    The application should address them accordingly.
  contact:
    name: For support contact IUDX Team at
    email: support@iudx.org.in
servers:
  - url: 'https://example-cat.com/iudx/cat/v1'
    description: Production Instance
paths:
  /search:
    get:
      tags:
        - Discovery
      description: |
        Generic catalogue search query. Searches for entites that meet the
        query criteria. The search enpoint allows one to query a particular property of an
        entity, or by its geo-location annotation, or by a full text-search or a combination of
        all three.
        #### Property Search
        One may combine multiple properties in a search through a logical "&". For each such property
        multiple possible values may be given. The syntax for a property query is -
        `property=[<prop-1>,<prop-2>]&value=[[<prop-1-val-1>,<prop-1-val-2>],[<prop-2-val-1>]]`
        Property search can be applied to only certain properties. These properties defined in the DX Schema Vocalbulary for all subClasses of [IUDXEntity](https://voc.iudx.org.in/IUDXEntity)
        These perform exact matches in the case of keywords such as
        `id`, `resourceGroup`, `provider`, `resourceServer`, `type`
        and approximate matches (text based) for all other properties.
        Some common uses are 
          - tags: `property=[tags]&value=[[aqm,pollution]]`
          - by type of entity: `property=[type]&value=[[iudx:ResourceGroup]]`. Valid entities are `iudx:Resource`, `iudx:ResourceGroup`, `iudx:Provider`, `iudx:ResourceServer`.
          - a combination: `property=[tags,type]&value=[[aqm,pollution], [iudx:ResourceGroup]]
          - resource belonging to a group: `property=[resourceGroup]&value=[[<group-id>]]`

        #### Geo Search
        Geo search accepts geojson based queries. The params and their accepted values are -
          - geoproperty: Which geoproperty to query. Default is `location`.
          - georel: Geo-relationship. One of `within`, `disjoint`, `intersects`.
          - geometry: GeoJson geometries. One of `Point`(point and circle), `Polygon`, `LineString`(for interseaction with points and polygons), `bbox`.
              - Point: Point and radius query
                  - coordinates: The center point of the circle, for e.g, `[73,13]` (lon and lat)
                  - maxDistance: Radius from the center point in meters, for e.g `100`
                  - georel: `within`
              - Polygon: Polygon/Multi-Polygon query
                  - coordinates: Coordinates of the polygon/s, for e.g, `[[[73,13],[73,12],[73,13]]]`.  Note, (lon and lat) and the first coordinate must be same as last.
                  - georel: `within, intersects, disjoint`
              - LineString: Multi line string
                  - coordinates: Coordinates of the multi-line, for e.g, `[[73,13],[74,15],[75,16]]`. 
                  - georel: `intersects`
              - bbox: Bounding box
                  - coordinates: `[[top-left],[bottom-right]]`, `[[73,13],[74,12]]`. 
                  - georel: `within`

        #### Text search
        This is a fuzzy full text based search. It searches across all entity types.
          - q: Text to be queried

        #### Complex search
        A combination of the above is allowed to make searches more  complex.

        #### Limits and filters
          - Documents returned can be limited by specifying a limit and offset. For e.g, `limit=100&offset=10` gives 100 documents from the 10th search result.
          - A subset of properties of returned documents can be filtered out. For e.g, `filter=[id]` returns documents with only the `id` property retained in them.
          - The sum of `offset` and `limit` should `<= 10000`, i.e. if the `offset=100`, then max `limit` should be `9900` and so on.
      operationId: search
      parameters:
        - name: instance
          in: header
          description: |
            DX instance on which this query is to be made. Don't mention this if search on entire catalogue is to be made. Else mentioning a specific instance name here restricts search only to that instance.
          required: false
          schema:
            type: string
            example: 'pune, surat, varanasi'
        - name: property
          in: query
          description: |
            Array of properties (strings) on which query is to be made. A logical "and" is performed between the properties. Only a maximum of 4 properties are allowed to be queried at once. The mapping between a property and a value is one-to-one. The only allowed properties to be queried are per the vocabulary schema mentioned in each sub-Class of [IUDXEntity](https://voc.iudx.org.in/IUDXEntity).
          schema:
            type: array
            minItems: 1
            maxItems: 4
            uniqueItems: true
            items:
              type: string
        - name: value
          in: query
          description: |
            Values of the one-to-one mapped strings in property. A logical "or" is performed for each value which is mapped to a property. For each property, only a maximum of 4 values are allowed. For e.g for property=[id,type] then value=[[<some-id>], [<some-type>]].
          required: false
          schema:
            type: array
            minItems: 1
            maxItems: 4
            uniqueItems: true
            items:
              type: string
        - name: geoproperty
          in: query
          description: Name of the property if the query is on a geospatial property.
          schema:
            enum:
              - location
              - geocovers
        - name: georel
          in: query
          description: Type of geoquery
          required: false
          schema:
            enum:
              - within
              - intersects
        - name: geometry
          in: query
          description: Geometry of the geo-query
          schema:
            enum:
              - Point
              - Polygon
              - LineString
              - bbox
        - name: coordinates
          in: query
          description: |
            Coordinates for the specific query type. For e.g, [[1,2], [3,4]]. Note: The data-type of this field is a string, therefore the coordinates are a string encoded multidimensional array.Precision supported is 6 decimal places.
          required: false
          schema:
            type: array
            format: double
            minItems: 1
            maxItems: 10
            items:
              type: number
        - name: maxDistance
          in: query
          description: Maximum distance from center point in meters
          required: false
          schema:
            type: number
            minimum: 0
            maximum: 10000
        - name: q
          in: query
          description: query for text/fuzzy search.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 100
        - name: limit
          in: query
          description: Limit number of records in search response.
          required: false
          schema:
            type: integer
            minimum: 1
        - name: offset
          in: query
          description: Offset from where the next batch of results should be returned.
          required: false
          schema:
            type: integer
        - name: filter
          in: query
          description: Filter properties to display. This is an array of strings.
          schema:
            type: array
            maxItems: 10
            items:
              type: string
      responses:
        '200':
          description: All the query parameters yielded results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForDiscovery'
              examples:
                Invalid Query Param:
                  value:
                    type: 'urn:dx:cat:InvalidQueryParam'
                    title: Generic invalid query param error
                Invalid Geo Param:
                  value:
                    type: 'urn:dx:cat:InvalidGeoParam'
                    title: Geoquery parameter error
                Invalid Geo Value:
                  value:
                    type: 'urn:dx:cat:InvalidGeoValue'
                    title: Geoquery value error
                Invalid Syntax:
                  value:
                    type: 'urn:dx:cat:InvalidSyntax'
                    title: Invalid Syntax
                Operation not allowed:
                  value:
                    type: 'urn:dx:cat:OperationNotAllowed'
                    title: Operation not allowed
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: tag search
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?property="[tags]"&value="[[pollution]]"&filter=[id,tags]&limit=100&offset=0'
        - lang: cURL
          label: search by circle
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]'
        - lang: cURL
          label: search by polygon
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]'
        - lang: cURL
          label: search by linestring
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]'
        - lang: cURL
          label: search by bbox
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.8420,18.5305],[73.8665,18.5126]]'
        - lang: cURL
          label: search by text
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/search?q="Bosch Climo"'
        - lang: cURL
          label: complex search
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[tags,id,location.geometry.coordinates]'
  /count:
    get:
      tags:
        - Discovery
      description: |
        Count APIs get the total number of hits for the given API request containing the provided query parameters.
      operationId: count
      parameters:
        - name: property
          in: query
          description: |
            Array of properties (strings) on which query is to be made. A logical "and" is
            performed between the properties. Only a maximum of 4 properties are allowed to be
            queried at once. The mapping between a property and a value is one-to-one. The only
            allowed properties to be queried are per the vocabulary schema mentioned in each
            sub-Class of [IUDXEntity](https://voc.iudx.org.in/IUDXEntity).
          schema:
            type: array
            minItems: 1
            maxItems: 4
            uniqueItems: true
            items:
              type: string
        - name: value
          in: query
          description: |
            Values of the one-to-one mapped strings in property. A logical "or" is performed for
            each value which is mapped to a property. For each property, only a maximum of 4
            values are allowed. For e.g for property=[id,type] then value=[[<some-id>],
            [<some-type>]].
          required: false
          schema:
            type: array
            minItems: 1
            maxItems: 4
            uniqueItems: true
            items:
              type: string
        - name: geoproperty
          in: query
          description: Name of the property if the query is on a geospatial property.
          schema:
            enum:
              - location
              - geocovers
        - name: georel
          in: query
          description: Type of geoquery
          required: false
          schema:
            enum:
              - within
              - intersects
        - name: geometry
          in: query
          description: Geometry of the geo-query
          schema:
            enum:
              - Point
              - Polygon
              - LineString
              - bbox
        - name: coordinates
          in: query
          description: |
            Coordinates for the specific query type. For e.g, [[1,2], [3,4]]. Note: The data-type
            of this field is a string, therefore the coordinates are a string encoded
            multidimensional array.Precision supported is 6 decimal places.
          required: false
          schema:
            type: array
            format: double
            minItems: 1
            maxItems: 10
            items:
              type: number
        - name: maxDistance
          in: query
          description: Maximum distance from center point in meters
          required: false
          schema:
            type: number
            minimum: 0
            maximum: 10000
        - name: q
          in: query
          description: query for text/fuzzy search.
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 100
      responses:
        '200':
          description: All the query parameters yielded results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
        '400':
          description: Bad query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForDiscovery'
              examples:
                Invalid Query Param:
                  value:
                    type: 'urn:dx:cat:InvalidQueryParam'
                    title: Generic invalid query param error
                Invalid Geo Value:
                  value:
                    type: 'urn:dx:cat:InvalidGeoValue'
                    title: Geoquery value error
                Invalid Syntax:
                  value:
                    type: 'urn:dx:cat:InvalidSyntax'
                    title: Invalid Syntax
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: count tags
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?value=[[pollution]]&property=[tags]'
        - lang: cURL
          label: count by circle
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.9,18.6]'
        - lang: cURL
          label: count by polygon
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]'
        - lang: cURL
          label: count by linestring
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]'
        - lang: cURL
          label: count by bbox
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/count?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73,20],[75,18]]'
        - lang: cURL
          label: count by text
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/count?q="Bosch Climo"'
  /geo:
    get:
      tags:
        - Discovery
      description: |
        List of all geolocations that match with value in parameter having maximum confidence
      operationId: get geolocations
      parameters:
        - name: q
          in: query
          description: location for which information is needed.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForGeoLocations'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForDiscovery'
              examples:
                Invalid Query Param:
                  value:
                    type: 'urn:dx:cat:InvalidParamValue'
                    title: Generic invalid query param error
                    detail: failed
                Invalid Geo Value:
                  value:
                    type: 'urn:dx:cat:InvalidGeoValue'
                    title: Geoquery value error
                    detail: failed
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/geo?q=malleswaram'
  '/list/{type}':
    get:
      tags:
        - List
      description: List a particular type
      operationId: list types
      parameters:
        - name: instance
          in: header
          description: |
            DX instance on which this query is to be made. Don't mention this is list on entire catalogue is to be made. Else mentioning a specific instance name here restricts search only to that instance.
          schema:
            type: string
            example: 'pune, surat, varanasi'
        - name: type
          in: path
          description: |
            If entites, then type must be resource, resourceGroup, resourceServer, provider, cos, owner. If
            properties then only tags is supported. Additionally all instances can also be listed
            as `instance`.
          required: true
          schema:
            enum:
              - tags
              - resourceServer
              - resourceGroup
              - instance
              - provider
              - cos
              - owner
            minLength: 4
            maxLength: 50
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                 - $ref: '#/components/schemas/listTypesSuccessResponse'
                 - $ref: '#/components/schemas/listTypesOwner'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listTypesErrorResponse'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: list by tags
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/tags'
        - lang: cURL
          label: list by instance
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/instance'
        - lang: cURL
          label: list by resourceGroup
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/resourceGroup'
        - lang: cURL
          label: list by resourceServer
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/resourceServer'
        - lang: cURL
          label: by provider
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/provider'
        - lang: cURL
          label: by cos
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/cos'
        - lang: cURL
          label: by owner
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/owner'
  /item:
    post:
      tags:
        - Entity
      description: |
        Insert an item into the catalogue where the item's body specifies the type of item and instance name. id and itemStatus are added by server. Items maybe subClasses of type [IUDXEntity](https://voc.iudx.org.in/IUDXEntity). Depending on this, some properties maybe mandatory. The json schema for the different types can be found [here](https://github.com/datakaveri/iudx-catalogue-server/tree/master/src/main/resources/iudx/catalogue/server/validator). In the future, we will serve schemas from our own servers.
      operationId: create item
      parameters:
        - name: token
          in: header
          description: DX Auth token to process the request
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/exampleEntityOwner'
                - $ref: '#/components/schemas/exampleEntityCos'
                - $ref: '#/components/schemas/exampleEntityResourceServer'
                - $ref: '#/components/schemas/exampleEntityProvider'
                - $ref: '#/components/schemas/exampleEntityResourceGroup'
                - $ref: '#/components/schemas/exampleEntityResource'
      responses:
        '201':
          description: Successfully inserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
              examples:
                Create Success:
                  value:
                    type: 'urn:dx:cat:Success'
                    results:
                      id: uuid
                      type: [ ]
                      name: wifi-location ...
                    title: 'urn:dx:cat:Success'
                    detail: 'Success: Item has been created successfully'

        '400':
          description: Invalid document
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/errorInvalidSchema'
                  - $ref: '#/components/schemas/errorInvalidLinks'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Unauthorized:
                  value:
                    type: 'urn:dx:cat:InvalidAuthorizationToken'
                    title: Token is invalid
                    detail: 'failed to decode/validate jwt token : Invalid format for JWT'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: create item cURL
          source: |
            curl --location --request POST 'https://example-cat.com/iudx/cat/v1/item/' \
            --header 'token: <token>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'

    put:
      tags:
        - Entity
      description: |
        Update an item where the body contains a fully valid item with id. Relationship links like
        provider, resourceGroup, resourceServer and "name" are not allowed to be updated. itemStatus is added by backend.
        Items maybe subClasses of type [IUDXEntity](https://voc.iudx.org.in/IUDXEntity). Depedning on this, some properties maybe mandatory.
        The json schema for the different types can be found [here](https://github.com/datakaveri/iudx-catalogue-server/tree/master/src/main/resources/iudx/catalogue/server/validator). In the future, we will serve schemas from our own servers.
        #### Non-updateable fields
        In case update of these fields is required, it is recommended to delete the item
        and re-upload it.
        1. iudx:Resource
           - id
           - provider
           - resourceGroup
           - resourceServer
           - name 
           - type (1st element in array non-modifiable)
           - itemStatus

        2. iudx:ResourceGroup
           - id
           - name
           - provider
           - type (1st element in array non-modifiable)
           - itemStatus

        3. iudx:ResourceServer
           - id
           - cos
           - owner
           - type (1st element in array non-modifiable)
           - itemStatus

        4. iudx:Provider
           - id
           - resourceServer
           - type (1st element in array non-modifiable)
           - itemStatus

        5. iudx:Cos
           - id
           - owner
           - name
           - type (1st element in array non-modifiable)
           - itemStatus
        
        6. iudx:Owner
           - id
           - name
           - type (1st element in array non-modifiable)
           - itemStatus
      operationId: update item
      parameters:
        - name: token
          in: header
          description: DX Auth token to process the request
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512

      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/exampleEntityWIdOwner'
                - $ref: '#/components/schemas/exampleEntityWIdCos'
                - $ref: '#/components/schemas/exampleEntityWIdResourceServer'
                - $ref: '#/components/schemas/exampleEntityWIdProvider'
                - $ref: '#/components/schemas/exampleEntityWIdResourceGroup'
                - $ref: '#/components/schemas/exampleEntityWIdResource'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateItemResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/errorInvalidSchema'
                  - $ref: '#/components/schemas/errorInvalidLinks'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
              examples:
                Unauthorized:
                  value:
                    type: 'urn:dx:cat:InvalidAuthorizationToken'
                    title: Token is invalid
                    detail: 'failed to decode/validate jwt token : Invalid format for JWT'
        '404':
          description: Document doesn't exist to update it
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateItemNotFound'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: update item cURL
          source: |
            curl --location --request PUT 'https://example-cat.com/iudx/cat/v1/item/' \
            --header 'token: <token>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'

    get:
      tags:
        - Entity
      description: Get an item given the id
      operationId: get item
      parameters:
        - name: id
          in: query
          description: ID of the DX Entity
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Found the item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
              example:
                type: 'urn:dx:cat:Success'
                title: Success
                totalHits: 10
                results:
                  - id: uuid
                    name: wifi-location
                    type:
                      - 'iudx:Resource'
                details: 'Success: Item fetched successfully'
        '400':
          description: Invalid ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invalidIdErrorResponse'
        '404':
          description: Didn't find the item.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForGetEntity'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: item by id
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/item?id=uuid'
    delete:
      tags:
        - Entity
      description: Delete an item
      operationId: delete item
      parameters:
        - name: token
          in: header
          description: DX Auth token to process the request
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
        - name: id
          in: query
          description: ID of the DX Entity
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
              examples:
                Delete Success:
                  value:
                    type: 'urn:dx:cat:Success'
                    title: Success
                    results:
                      - id: uuid
                    details: 'Success: Item has been deleted successfully'

        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
        '404':
          description: Didn't find the item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseWithObjects'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: delete item
          source: |
            curl --location --request DELETE 'https://example-cat.com/iudx/cat/v1/item?id=uuid' \
            --header 'token: <token>'
  /relsearch:
    get:
      tags:
        - Relationship
      description: 'Search related items in the catalogue '
      operationId: relationship search
      parameters:
        - name: instance
          in: header
          description: |
            DX instance on which this query is to be made. Don't mention this if relsearch on
            entire catalogue is to be made. Else mentioning a specific instance name here
            restricts search only to that instance.
          required: false
          schema:
            type: string
            maxLength: 100
            example: 'pune, surat, varanasi'
        - name: relationship
          in: query
          description: |
            Relationship attribute on which the query is to be made. For
            e.g, entities whose related provider entity's name needs to match xyz will
            have this field as "[provider.name]". The relationship is enclosed in [].
            If there are two relationships, then they must be comma separated. For e.g,
            [provider.name, resourceGroup.name].
          required: false
          schema:
            type: array
            items:
              type: string
        - name: value
          in: query
          description: |
            Value of the relationhsip. Multiple values for a single relationship are supported,
            for e.g, [[val1, val2]].

            If multiple relationships are specified, then their values will occur as so -
            [[rel1-val1],[rel2-val1]]
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Success Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/relSearchErrorResponse'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: search inside relationship
          source: |
            curl --location -g --request GET 'https://example-cat.com/iudx/cat/v1/relsearch?relationship="[provider.name]"&value="[[IUDXAdmin]]"'
  /relationship:
    get:
      tags:
        - Relationship
      description: |
        This API allows one to retrieve documents which are connected by certain relationship attribute in an entity. It allows one to fetch an entity/entities that are immediate neighbor(s) of the input entity.
        To explain this API better we provide an illustrative catalogue graph connecting different catalogue entities below: 
        ```
                                  forward relationship
                               ───────────────────►

                                                                 ┌─────────────────┐      
        ┌───────────────┐                                        │                 │                 
        │               ├────────────────────────────────────────► ResourceServer  │ 
        │ Resource  RI  │                                  ┌─────►      RS         │     
        │               ├─────┐                            │     └─────────────────┘     
        └───────────────┘     │    ┌─────────────────┐     │               │
                │             │    │                 ├─────┘               │
                │             └────► Provider PA     │                     │
                │             ┌────►                 │                     ▼              
                ▼             │    └─────────────────┘            ┌────────────────┐     
        ┌───────────────┐     │                                   │                │     
        │               │     │                                   │ COS cos        │
        │ ResourceGroup │     │                                   │                │ 
        │      RG       ├─────┘                                   └────────────────┘               
        └───────────────┘  
        
        
        
                               ◄────────────────────
                                   inverse relationship
        ```   
        Given a resource item, say Resource A, one may want to retrieve the resource group item associated with it. Similarly, given a resource group item, say RG1, one may want to retrieve all resource entities that belong to this resource group.
        The following table shows applicable queries for different entities.


        | Type of the entity (id) | Supported relationships for "rel"                | Description                                                                                                                   |
        |-------------------------|------------------------------------------------- |-------------------------------------------------------------------------------------------------------------------------------|
        | Resource                | resourceGroup,provider, resourceServer, cos      | Return the associated resourceGroup (or resourceServer or provider or cos) entity. Only single entity is returned.            │ 
        | ResourceGroup           | resource                                         | Return all resource items associated with the input resource group. Multiple entities may be returned.                        |
        | ResourceGroup           | resourceServer, provider, cos                    | Return the associated resourceServer (or provider or cos) entity. Only single entity is returned.                             |
        | Provider                | resource, resourceGroup                          | Return all resource or resource group items associated with the input provider. Multiple entities maybe returned.             |
        | Provider                | resourceServer, cos                              | Return the associated resourceServer (or cos) entity. Only single entity is returned.                                         |
        | ResourceServer          | resource, resourceGroup, provider                | Return all resource or resource group items associated with the input resource server. Multiple entities maybe returned.      |
        | ResourceServer          | cos                                              | Return the cos entity. Only single entity is returned.                                                                        |

         > **_NOTE:_** For the item types resource, resourceGroup, provider and resourceServer a special relationship value `rel=all` returns all the parent documents of the given entity(the result also includes the item itself.)
      operationId: get related entity
      parameters:
        - name: instance
          in: header
          description: |
            DX instance on which this query is to be made. Don't mention this if relationship search
            on entire catalogue is to be made. Else mentioning a specific instance name here restricts
            search only to that instance.
          required: false
          schema:
            type: string
        - name: rel
          in: query
          description: Relationship attribute of the entity whose id is provided
          required: true
          schema:
            enum:
              - provider
              - resourceGroup
              - resourceServer
              - resource
              - cos
              - all
              - type
        - name: id
          in: query
          description: id of the entity
          required: true
          schema:
            type: string
            maxLength: 512
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successResponseForRelationship'
                  - $ref: '#/components/schemas/successResponseForRelationship2'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForRelationship'
              examples:
                Invalid Query Param:
                  value:
                    type: 'urn:dx:cat:InvalidParamValue'
                    title: Invalid value for a query param
                    detail: Invalid relationship value
                Invalid Syntax:
                  value:
                    type: 'urn:dx:cat:InvalidSyntax'
                    title: Invalid Syntax
                Invalid Filter error:
                  value:
                    type: failed
                    title: The max number of filter should be 10
                Invalid limit and offset:
                  value:
                    type: failed
                    title: The limit + offset should be between 1 to 10000
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: search by resourceGroup relationship
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/relationship?id=<resource-id>&rel=resourceGroup'
        - lang: cURL
          label: search by "all" relationship
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/relationship?id=<resource-group-id>&rel=all'
  /instance:
    post:
      tags:
        - Administrator
      description: Create an DX instance
      operationId: create instance
      parameters:
        - name: token
          in: header
          description: DX Auth token to process the request
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
        - name: id
          in: query
          description: |
            `id` of the instance. In most cases this is a city name.
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successfully inserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseCreateInstance'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForCreateInstance'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: create instance
          source: |
            curl --location --request POST 'https://example-cat.com/iudx/cat/v1/instance?id=Bengaluru' \
            --header 'token: <token>' \
            --data-raw ''
  /list/instance:
    get:
      tags:
        - Administrator
      description: This API gets the list of instances from the DX Catalogue Server
      operationId: get instances
      responses:
        '200':
          description: Successfully inserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForGetInstance'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: create instance
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/list/instance'
    delete:
      tags:
        - Administrator
      description: Delete an DX instance
      operationId: delete instance
      parameters:
        - name: token
          in: header
          description: DX Auth token to process the request
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: |
            id of the instance. In most cases this is a city name.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForDeleteInstance'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
        '404':
          description: Instance doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForDeleteInstance'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: delete instance
          source: |
            curl --location --request DELETE 'https://example-cat.com/iudx/cat/v1/instance?id=Bengaluru' \
            --header 'token: <token>'
  /consumer/ratings:
    post:
      tags:
        - Consumer
      description: |
        Create a rating object for a resource item.

          ` A consumer can provide a rating for a resource item only if they have queried the resource from the DX Resource Server a min number of times. For eg: 100 API calls. `
      operationId: create rating object
      parameters:
        - name: token
          in: header
          description: DX Auth token to process the request
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
        - name: id
          in: query
          description: ID of the DX Entity
          required: true
          schema:
            type: string
            maxLength: 512
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exampleRating'
      responses:
        '201':
          description: Successfully inserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForConsumerRating'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForConsumerRating'
              examples:
                Invalid Schema:
                  value:
                    type: 'urn:dx:cat:InvalidSchema'
                    title: Invalid Schema
                Invalid Access Count:
                  value:
                    type: 'urn:dx:cat:AccessDenied'
                    title: Resource usage requirements not satisfied
                    detail: User has to access resource at least 2 times to give rating
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
      servers:
        - url: 'https://example-cat.com/'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: create rating
          source: |
            curl --location --request POST 'https://example-cat.com/consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta' \
            --header 'token: <token>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'
    put:
      tags:
        - Consumer
      description: Update a rating object of a resource item
      operationId: update rating object
      parameters:
        - name: token
          in: header
          description: DX Auth token to process the request
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
        - name: id
          in: query
          description: ID of the DX Entity
          required: true
          schema:
            type: string
            maxLength: 512
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exampleRating'
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForUpdateRating'
        '400':
          description: Invalid document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForUpdateRating'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
      servers:
        - url: 'https://example-cat.com/'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: update rating
          source: |
            curl --location --request PUT 'https://example-cat.com/consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta' \
            --header 'token: <token>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'
    get:
      tags:
        - Consumer
      description: |
        Get a rating, all ratings or average rating for a resource or for a resource group
      operationId: get ratings
      parameters:
        - name: token
          in: header
          description: DX Auth token to process the request
          required: false
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
        - name: id
          in: query
          description: ID of the DX Entity
          required: true
          schema:
            type: string
            maxLength: 512
        - name: type
          in: query
          description: Get all ratings or average rating based on type
          required: false
          schema:
            enum:
              - average
              - group
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successResponseGetRating'
                  - $ref: '#/components/schemas/successResponseAvgRating'
        '204':
          description: No content
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
      servers:
        - url: 'https://example-cat.com/'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: get user rating
          source: |
            curl --location --request GET 'http://example-cat.com/consumer/ratings?id=datakaveri.org/1022f4c20542abd5087107c0b6de4cb3130c5b7b/rs.iudx.io/sqtc-test-group-1/FWR015' --header 'token: <consumer-token>'
        - lang: cURL
          label: get all rating of resource
          source: |
            curl --location --request GET 'https://example-cat.com/consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta&type=group'
        - lang: cURL
          label: get average rating of resource
          source: |
            curl --location --request GET 'https://example-cat.com/consumer/ratings?id=datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.io/pune-env-flood&type=average'
    delete:
      tags:
        - Consumer
      description: delete a rating object for a resource item
      operationId: delete rating object
      parameters:
        - name: token
          in: header
          description: DX Auth token to process the request
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
        - name: id
          in: query
          description: ID of the DX Entity
          required: true
          schema:
            type: string
            maxLength: 512
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForDeleteRatingObject'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
      servers:
        - url: 'https://example-cat.com/'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: delete rating
          source: |
            curl --location --request DELETE 'https://example-cat.com/consumer/ratings?id=iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta' \
            --header 'token: <token>'
  /internal/ui/instance:
    post:
      tags:
        - Mlayer Instance
      operationId: create instance
      parameters:
        - name: token
          in: header
          description: A valid DX Authorization token
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
      requestBody:
        description: 'Create a new Instance using name, cover, icon, logo.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exampleInstance'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForCreatingInstance'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForCreatingInstance'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: create instance
          source: |
            curl --location --request POST 'https://example-cat.com/iudx/cat/v1/internal/ui/instance' \
            --header 'token: <token>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'
    put:
      tags:
        - Mlayer Instance
      description: Update the instance of the middle layer
      operationId: update instance
      parameters:
        - name: token
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
        - name: id
          in: query
          description: |
            `id` of the instance to be updated
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exampleInstance'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForUpdatingInstance'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForCreatingInstance'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: update instance
          source: |
            curl --location --request PUT 'https://example-cat.com/iudx/cat/v1/internal/ui/instance?instanceId=191e35e3-99c2-43a5-ba8d-811a756b08de' \
            --header 'token: <token>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'
    get:
      tags:
        - Mlayer Instance
      description: |
        Get list of all Instances
      operationId: get instance
      parameters:
        - name: id
          in: query
          description: |
            `id` of the instance to be fetched
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForGettingInstance'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: get instance
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/internal/ui/instance'
    delete:
      tags:
        - Mlayer Instance
      description: delete an instance using id parameter
      operationId: delete instance
      parameters:
        - name: token
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
        - name: id
          in: query
          description: |
            `id` of the Instance to be deleted.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForDeletingInstance'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: delete instance
          source: |
            curl --location --request DELETE 'https://example-cat.com/iudx/cat/v1/internal/ui/instance?instanceId=191e35e3-99c2-43a5-ba8d-811a756b08de' \
            --header 'token: <token>'
  /internal/ui/domain:
    post:
      tags:
        - Mlayer Domain
      description: |
        Create a new Data model Domain
      operationId: create domain
      parameters:
        - name: token
          in: header
          description: A valid DX Authorization token
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
      requestBody:
        description: 'Create a new domain using name, label, icon, description.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exampleDomain'
      responses:
        '201':
          description: Successfully inserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForCreatingDomain'
        '400':
          description: Invalid document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForCreatingInstance'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: create domain
          source: |
            curl --location --request POST 'https://example-cat.com/iudx/cat/v1/internal/ui/domain' \
            --header 'token: <token>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'
    put:
      tags:
        - Mlayer Domain
      description: Update the data model domain of the middle layer
      operationId: update domain
      parameters:
        - name: token
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
        - name: id
          in: query
          description: |
            `id` of the data model domain, to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: 'name, label, icon and description can be updated.'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exampleDomain'
      responses:
        '200':
          description: Successfully inserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForUpdatingDomain'
        '400':
          description: Invalid document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForCreatingInstance'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: update domain
          source: |
            curl --location --request PUT 'https://example-cat.com/iudx/cat/v1/internal/ui/domain?domainId=3d73067f-2855-4155-b918-14d621b7a576' \
            --header 'token: <token>' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'
    get:
      tags:
        - Mlayer Domain
      description: |
        Get list of all Data-model Domains.
      operationId: get domain
      parameters:
        - name: id
          in: query
          description: |
            `id` of the data model domain, to be fetched
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForGettingDomain'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: get domain
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/internal/ui/domain'
    delete:
      tags:
        - Mlayer Domain
      description: delete a data model domain
      operationId: delete domain
      parameters:
        - name: token
          in: header
          description: Authorization token
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9\/\@\.]*$'
            maxLength: 512
        - name: id
          in: query
          description: |
            `id` of the Domain to be deleted.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForDeletingDomain'
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unAuthorizedAccess'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: delete domain
          source: |
            curl --location --request DELETE 'https://example-cat.com/iudx/cat/v1/internal/ui/domain?domainId=3d73067f-2855-4155-b918-14d621b7a576' \
            --header 'token: <token>'
  /internal/ui/providers:
    get:
      tags:
        - MLayer
      description: |
        A catalogue API to list all providers, which will be reflected on the catalogue UI.
      operationId: get providers
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForUIProvider'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: get providers
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/internal/ui/providers'
  /internal/ui/geoquery:
    post:
      tags:
        - MLayer
      description: |
        A catalogue API to get location of all resource groups whose id(s) are provided, which will be reflected on the catalogue UI.
      operationId: get map view
      requestBody:
        description: id's of the dataset belonging to instance whose location is needed.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/exampleReqBodyMapView'
      responses:
        '200':
          description: Successfully inserted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForGettingGeoquery'
        '400':
          description: Invalid document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForCreatingInstance'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: get geoquery
          source: |
            curl --location --request POST 'https://example-cat.com/iudx/cat/v1/internal/ui/geoquery' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'
  /internal/ui/dataset:
    get:
      tags:
        - Mlayer Dataset
      description: |
        Fetches details of all the datasets.
      operationId: get datasets
      responses:
        '200':
          description: Successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForGettingDatasets'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: get dataset
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/internal/ui/dataset'
    post:
      tags:
        - Mlayer Dataset
      description: Fetches the dataset details of a particular dataset using dataset_id. Domains, Instance, Tags and provider field can be used to filter the datasets.
      operationId: get dataset and its resources
      requestBody:
        description: 'Based on id dataset and its resources are retrieved. If id field blank or not present then, tags, providers and instance can be used to filter from all datasets.'
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/exampleReqBodyDatasetById'
                - $ref: '#/components/schemas/exampleReqBodyDatasetByAllField'
      responses:
        '200':
          description: Successfully fetched
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/successResponseForGettingDatasetResources'
                  - $ref: '#/components/schemas/successResponseForGettingDatasets'

        '400':
          description: Invalid Document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForCreatingInstance'
        '404':
          description: dataset not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForObjectNotFound'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: post dataset
          source: |
            curl --location --request POST 'https://example-cat.com/iudx/cat/v1/internal/ui/dataset' \
            --header 'Content-Type: application/json' \
            --data-raw '<payload>'
  /internal/ui/popularDatasets:
    get:
      tags:
        - MLayer
      description: |
        A catalogue API to get data for the landing page, which will be reflected on the catalogue UI. <br> **Instances (4)** - On sorting alphabetically, First four instances are required. <br> **Featured Datasets (6)** - (Views) Based on the count of views sort top 6 records. <br> **latest dataset (6)** - (itemCreatedAt) Dataset which was recently added, top 6 records.
      operationId: get popular datasets
      parameters:
        - name: instance
          in: query
          description: |
            `name` of the instance from where the dataset information has to be fetched
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseForPopularDatasets'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: get popularDatasets
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/internal/ui/popularDatasets'
  /nlpsearch:
    get:
      tags:
        - NLP
      operationId: NLP search
      parameters:
        - name: q
          in: query
          description: An English sentence
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponseWithObjects'
        '404':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponseForNlpSearch'
      servers:
        - url: 'https://example-cat.com/iudx/cat/v1'
          description: Production Instance
      x-codeSamples:
        - lang: cURL
          label: search
          source: |
            curl --location --request GET 'https://example-cat.com/iudx/cat/v1/nlpsearch?q=where can I halt near chandigarh'
tags:
  - name: Entity
    description: |
      Manage catalogue entities and perform Create/Update/Read/Delete operations on them.
      These apis are intended to be used by DX(Data Exchange) Data *Providers*.
    x-displayName: Entity
  - name: Discovery
    description: |
      Discovery DX Entities using a rich discovery api supporting property, text and geo-based queries.
      These apis are intended to be used by DX(Data Exchange) Data *Consumers*.
      <br> Geo-Query APIs list the location of the dataset ids' given in the request body of a particular instance
    x-displayName: Discovery
  - name: List
    description: |
      List DX Entities of a certain type.
      These apis are intended to be used by User Interfaces.
    x-displayName: List
  - name: Relationship
    description: |
      Discovery of entities through their relationships.
      These apis are intended to be used by DX(Data Exchange) Data *Consumers*.
    x-displayName: Relationship
  - name: Administrator
    description: |
      Catalogue administrator specific apis.
    x-displayName: Administrator
  - name: Consumer
    description: |
      Catalogue consumer specific apis.
    x-displayName: Consumer
  - name: MLayer
    description: |
      Catalogue middle layer specific APIs.  <br> These apis consist of providers, geo-query and overview APIs
    x-displayName: MLayer
  - name: Mlayer Instance
    description: |
      Catalogue middle layer specific APIs.  Instance refers to the name of the city/location.
    x-displayName: Mlayer Instance
  - name: Mlayer Domain
    description: |
      Catalogue middle layer specific APIs.  Catalogue has data-domain models that describes each of the domains.
    x-displayName: Mlayer Domain
  - name: Mlayer Dataset
    description: |
      Catalogue middle layer specific API fetches all the datasets that belong to the Data Exchange
    x-displayName: Mlayer Dataset
  - name: NLP
    description: |
      Natural Language Processing API is used a for a text based search to discover resources and resource groups on the catalogue server
    x-displayName: NLP API
components:
  schemas:
    successResponseWithObjects:
      type: object
      title: Root Type for standardResponse
      description: Standard Response for all requests
      properties:
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
        detail:
          type: string
          description: Detailed description of the type or response
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have been triggered.
        title:
          type: string
          description: A human readable title to the message response.
      required:
        - type
      x-examples:
        Example 1:
          type: 'urn:dx:cat:Success'
          title: Success
          totalHits: 10
          results:
            - id: uuid
              name: wifi-location
              type:
                - 'iudx:Resource'
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 10
        results:
          - id: uuid
            name: wifi-location
            type:
              - 'iudx:Resource'
    errorResponseForDiscovery:
      type: object
      title: Root Type for Discovery APIs
      description: 'Standard Error Response for the search, count and geo queries'
      properties:
        type:
          type: string
          description: |
            Type of the response indicating if the query was successful or if any errors have been triggered.
        title:
          description: A human readable title to the message response.
        detail:
          type: string
          description: Detailed description of the type or response
      required:
        - type
      example:
        type: <error urn>
        title: <error title
        detail: <error detail description>
    successResponseForGeoLocations:
      type: object
      title: Response for get geolocations
      description: Example response for a geocoding API
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 3
        results:
          - name: Mallesvaram
            country: India
            region: Karnataka
            county: Bangalore
            locality: Bangalore
            borough: West Bangalore
            bbox:
              - 77.563072
              - 12.968362
              - 77.573072
              - 12.978362
    listTypesSuccessResponse:
      type: object
      title: Response for list with instance type
      description: Example response for list types
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 5
        results:
          - pune
          - stqc
          - surat
    listTypesErrorResponse:
      type: object
      title: Response for bad request
      description: Invalid item type in the given request
      properties:
        type:
          type: string
          description: |
            Indicates that the item type sent in request path param is invalid
        title:
          description: A human readable title to the message response
        detail:
          type: string
          description: Detailed description of the type or response
      required:
        - type
      example:
        type: 'urn:dx:cat:InvalidSyntax'
        title: Invalid Syntax
        detail: Wrong Item Type
    listTypesOwner:
      type: object
      title: Response for list owner
      description: API response when item type is owner
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: urn:dx:cat:Success
        title: Success
        totalHits: 1
        results:
          - '@context': https://voc.iudx.org.in/
            type:
              - iudx:Owner
            name: IudxOwner
            description: owner item for IUDX entities
            id: cc18c925-8990-3a07-9cac-0bb2bd8166f6
            itemStatus: ACTIVE
            itemCreatedAt: 2023-09-08T10:00:02+0530



    invalidIdErrorResponse:
      type: object
      title: Invalid ID
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          type: string
          description: A human readable title to the message response.
        detail:
          type: string
          description: Detailed description of the type or response
      example:
        type: 'urn:dx:cat:InvalidUUID'
        title: Invalid syntax of uuid
        detail: The id is invalid
    errorResponseForGetEntity:
      type: object
      title: Root Type for standardResponse
      description: Standard Response for all requests
      properties:
        type:
          type: string
          description: |
            Type of the response indicating if the query was successful or if any errors have been triggered.
        title:
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
        detail:
          type: string
          description: Detailed description of the type or response

      required:
        - type
      example:
        type: 'urn:dx:cat:ItemNotFound'
        title: error
        totalHits: 0
        results: [ ]
        detail: 'doc does not exist'
    exampleEntityWIdOwner:
      type: object
      title: owner entity
      description: An example entity without ID (For first time onboarding)
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        description:
          type: string
        id:
          type: string
          format: uuid
      required:
        - id
    exampleEntityWIdCos:
      type: object
      title: cos entity
      description: payload for update item with ID
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        description:
          type: string
        cosURL:
          type: string
        cosUI:
          type: string
      required:
        - type
        - name
        - description
        - cosURL
        - cosUI
      example:
        '@context': 'https://voc.iudx.org.in/'
        type:
          - 'iudx:COS'
        name: cos.cop.iudx.org.in
        description: COS Smart Kalyan-Dombivli Development Corporation Limited
        cosURL: kdmc.cop-nec.iudx.org.in
        cosUI: 'https://catalogue.kdmc.cop-nec.iudx.org.in/'
    exampleEntityWIdResourceServer:
      type: object
      title: resource server entity
      description: payload for update item with ID
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        cos:
          type: string
          format: uuid
        owner:
          type: string
          format: uuid
        resourceServerOrg:
          type: string
        resourceServerRegURL:
          type: string
        resourceAccessModalities:
          type: array
          items:
            type: object
        location:
          type: array
          items:
            type: string
      required:
        - '@context'
        - type
        - name
        - description
        - tags
        - cos
        - owner
        - resourceServerOrg
        - resourceAccessModalities
        - location
      x-examples:
        Example 1:
          '@context': 'https://voc.iudx.org.in/'
          type:
            - 'iudx:ResourceServer'
          name: Iudx ResourceServer
          description: Multi tenanted IUDX resource server
          tags:
            - IUDX
            - Resource
            - Server
            - Platform
          cos: 26d33603-c0bb-4ea0-85f8-4017020597ce
          owner: 37d33603-c0bb-4ea0-85f8-4017031686df
          resourceServerOrg:
            name: iudx
            additionalInfoURL: 'https://iudx.org.in'
            location:
              type: Place
              address: 'IISc, Bangalore'
              geometry:
                type: Point
                coordinates:
                  - 77.570423
                  - 13.013945
          resourceServerRegURL: example.iudx.io
          resourceAccessModalities:
            - protocol: http
              accessURL: rs
              type:
                - 'iudx:HTTPAccess'
            - protocol: amqps
              accessURL: databroker
              type:
                - 'iudx:StreamingAccess'
            - protocol: ftp
              accessURL: file
              type:
                - 'iudx:FileAccess'
          location:
            type: Place
            address: 'IISc, Bangalore'
            geometry:
              type: Point
              coordinates:
                - 77.570423
                - 13.013945
      example:
        '@context': 'https://voc.iudx.org.in/'
        type:
          - 'iudx:ResourceServer'
        name: Iudx ResourceServer
        description: Multi tenanted IUDX resource server
        tags:
          - IUDX
          - Resource
          - Server
          - Platform
        id: 3988525c-e506-3927-a80c-cf013bd87d69
        cos: 26d33603-c0bb-4ea0-85f8-4017020597ce
        owner: 37d33603-c0bb-4ea0-85f8-4017031686df
        resourceServerOrg:
          name: iudx
          additionalInfoURL: 'https://iudx.org.in'
          location:
            type: Place
            address: 'IISc, Bangalore'
            geometry:
              type: Point
              coordinates:
                - 77.570423
                - 13.013945
        resourceServerRegURL: example.iudx.io
        resourceAccessModalities:
          - protocol: http
            accessURL: rs
            type:
              - 'iudx:HTTPAccess'
          - protocol: amqps
            accessURL: databroker
            type:
              - 'iudx:StreamingAccess'
          - protocol: ftp
            accessURL: file
            type:
              - 'iudx:FileAccess'
        location:
          type: Place
          address: 'IISc, Bangalore'
          geometry:
            type: Point
            coordinates:
              - 77.570423
              - 13.013945
    exampleEntityWIdProvider:
      type: object
      title: provider entity
      description: payload for update item with ID
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        resourceServer:
          type: string
          format: uuid
        description:
          type: string
        providerUserId:
          type: string
          format: uuid
        providerOrg:
          type: string
      required:
        - type
        - name
        - resourceServer
        - description
        - providerUserId
        - providerOrg
      x-examples:
        Example 1:
          '@context': 'https://voc.iudx.org.in/'
          type:
            - 'iudx:Provider'
          name: IudxProvider
          resourceServer: '{{UUID}}'
          description: provider id for uuid test
          providerUserId: UUID
          providerOrg:
            name: Datakaveri
            additionalInfoURL: 'https://datakaveri.org'
            location:
              type: Place
              address: IIsc
              geometry:
                type: Point
                coordinates:
                  - 75.92
                  - 14.5
      example:
        '@context': 'https://voc.iudx.org.in/'
        type:
          - 'iudx:Provider'
        name: IudxProvider
        resourceServer: '{{UUID}}'
        description: provider id for uuid test
        providerUserId: UUID
        providerOrg:
          name: Datakaveri
          additionalInfoURL: 'https://datakaveri.org'
          location:
            type: Place
            address: IIsc
            geometry:
              type: Point
              coordinates:
                - 75.92
                - 14.5
    exampleEntityWIdResourceGroup:
      type: object
      title: resource group entity
      description: payload for update item with ID
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        provider:
          type: string
          format: uuid
      required:
        - type
        - name
        - description
        - tags
        - provider
      x-examples:
        Example 1:
          '@context': 'https://voc.iudx.org.in/'
          type:
            - 'iudx:ResourceGroup'
            - 'iudx:IssueReporting'
          name: agra-swachhata-apps
          description: 'Civic Issues like open defecation, garbage dumping, etc., reported in Agra city via Swachhata app. Publishes all the complaints/issues lodged on the current day, on a daily basis.'
          tags:
            - swachhata
            - complaints
            - reporting
            - issue
            - garbage dump
            - debris removal
            - open defecation
            - construction material
            - requests
          provider: '{{UUID}}'
      example:
        '@context': 'https://voc.iudx.org.in/'
        type:
          - 'iudx:ResourceGroup'
          - 'iudx:IssueReporting'
        name: agra-swachhata-apps
        description: 'Civic Issues like open defecation, garbage dumping, etc., reported in Agra city via Swachhata app. Publishes all the complaints/issues lodged on the current day, on a daily basis.'
        tags:
          - swachhata
          - complaints
          - reporting
          - issue
          - garbage dump
          - debris removal
          - open defecation
          - construction material
          - requests
        provider: '{{UUID}}'
    exampleEntityWIdResource:
      type: object
      title: resource entity
      description: payload for update item with ID
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        label:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        apdURL:
          type: string
        accessPolicy:
          type: string
        resourceServer:
          type: string
          format: uuid
        provider:
          type: string
          format: uuid
        resourceGroup:
          type: string
          format: uuid
      required:
        - type
        - name
        - label
        - description
        - tags
        - apdURL
        - accessPolicy
        - resourceServer
        - provider
        - resourceGroup
      example:
        '@context': 'https://voc.iudx.org.in/'
        type:
          - 'iudx:Resource'
          - 'iudx:PointOfInterest'
        name: wifi-location
        label: Wi-Fi Locations in Pimpri-Chinchwad City
        description: The physical coordinates of Wi-Fi system locations in Pimpri-Chinchwad city.
        tags:
          - Wi-Fi
          - Wi-Fi zone
          - hotspot
          - internet
          - Wi-Fi access
          - Wi-Fi location
          - wireless internet
          - internet access
        apdURL: rs.apd.iudx.org.in
        accessPolicy: SECURE
        resourceServer: '{{uuid}}'
        provider: '{uuid}}'
        resourceGroup: '{{uuid}}'
    updateItemResponse:
      type: object
      title: Response for update Item
      description: Success response for update Item with ID
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have been triggered
        title:
          description: A human readable title to the message response
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
        detail:
          type: string
          description: Detailed description of the type or response

      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          id: uuid
          type: [ ]
          name: wifi-location
        details: 'Success: Item has been updated successfully'

    errorInvalidSchema:
      type: object
      title: Response - invalid schema
      description: Invalid Schema response schema
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have been triggered
        title:
          description: A human readable title to the message response
        detail:
          type: string
          description: Detailed description of the type or response
        required:
          - type
      example:
        type: 'urn:dx:cat:InvalidSchema'
        title: Invalid Schema
        detail: Invalid Schema
        results: [ ]
    errorInvalidLinks:
      type: object
      title: Response  - invalid links
      description: Invalid Links response schema
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have been triggered
        title:
          description: A human readable title to the message response
        detail:
          type: string
          description: Detailed description of the type or response
        required:
          - type
      example:
        type: urn:dx:cat:LinkValidationFailed
        title: Link Validation Failed
        detail: Provider not found
    errorResponseWithObjects:
      type: object
      title: Root Type for standardResponse
      description: Standard Response for all requests
      properties:
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
        detail:
          type: string
          description: Detailed description of the type or response
        type:
          type: string
          description: |
            Type of the response indicating if the query was successful or if any errors have been triggered.
        title:
          description: A human readable title to the message response.
      required:
        - type
      example:
        totalHits: 10
        results:
          - { }
        type: <error urn>
        title: <error title
        detail: <error detail description>
    updateItemNotFound:
      type: object
      title: Document not found
      properties:
       type:
        type: string
        description: |
          Type of the response indicating if the query was successful or if any errors have been triggered.
       title:
        type: string
        description: A human readable title to the message response.\
       results:
        type: array
        description: Results which matched the query. This is an array of objects.
        items:
          type: object
       detail:
         type: string
         description: Detailed description of the type or response

      description: Update Item Not Found
      example:
        type: urn:dx:cat:ItemNotFound
        title: Item is not found
        results:
          - id: eba4c1dc-8713-26d7-87e6-ec4608473bb4
            method: update
            title: failed
            detail: 'Fail: Doc doesn''t exist, can''t update'
        detail: 'Fail: Doc doesn''t exist, can''t update'

    exampleEntityOwner:
      type: object
      title: owner entity
      description: An example entity without ID (For first time onboarding)
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        description:
          type: string
      required:
        - '@context'
        - type
        - name
        - description
    exampleEntityCos:
      type: object
      title: cos entity
      description: An example entity without ID (For first time onboarding)
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        description:
          type: string
        cosURL:
          type: string
          description: url of the COS
        cosUI:
          type: string
          description: url of the user interface
        owner:
          type: string
          description: id of the owner item in catalogue
      required:
        - '@context'
        - type
        - name
        - description
        - cosURL
        - cosUI
        - owner
      x-examples:
        Example 1:
          '@context': 'https://voc.iudx.org.in/'
          type:
            - 'iudx:COS'
          name: cos.cop.iudx.org.in
          owner: <owner-id>
          description: COS Smart Kalyan-Dombivli Development Corporation Limited
          cosURL: kdmc.cop-nec.iudx.org.in
          cosUI: 'https://catalogue.kdmc.cop-nec.iudx.org.in/'
      example:
        '@context': 'https://voc.iudx.org.in/'
        type:
          - 'iudx:COS'
        name: cos.cop.iudx.org.in
        owner: 26d33603-c0bb-4ea0-85f8-4017020597ce
        description: COS Smart Kalyan-Dombivli Development Corporation Limited
        cosURL: kdmc.cop-nec.iudx.org.in
        cosUI: 'https://catalogue.kdmc.cop-nec.iudx.org.in/'
    exampleEntityResourceServer:
      type: object
      title: resource server entity
      description: payload for update item with ID
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        cos:
          type: string
          format: uuid
        owner:
          type: string
          format: uuid
        resourceServerOrg:
          type: string
        resourceServerRegURL:
          type: string
        resourceAccessModalities:
          type: array
          items:
            type: object
        location:
          type: array
          items:
            type: string
      required:
        - '@context'
        - type
        - name
        - description
        - tags
        - cos
        - owner
        - resourceServerOrg
        - resourceAccessModalities
        - location
      x-examples:
        Example 1:
          '@context': 'https://voc.iudx.org.in/'
          type:
            - 'iudx:ResourceServer'
          name: Iudx ResourceServer
          description: Multi tenanted IUDX resource server
          tags:
            - IUDX
            - Resource
            - Server
            - Platform
          cos: 26d33603-c0bb-4ea0-85f8-4017020597ce
          owner: 37d33603-c0bb-4ea0-85f8-4017031686df
          resourceServerOrg:
            name: iudx
            additionalInfoURL: 'https://iudx.org.in'
            location:
              type: Place
              address: 'IISc, Bangalore'
              geometry:
                type: Point
                coordinates:
                  - 77.570423
                  - 13.013945
          resourceServerRegURL: example.iudx.io
          resourceAccessModalities:
            - protocol: http
              accessURL: rs
              type:
                - 'iudx:HTTPAccess'
            - protocol: amqps
              accessURL: databroker
              type:
                - 'iudx:StreamingAccess'
            - protocol: ftp
              accessURL: file
              type:
                - 'iudx:FileAccess'
          location:
            type: Place
            address: 'IISc, Bangalore'
            geometry:
              type: Point
              coordinates:
                - 77.570423
                - 13.013945
      example:
        '@context': 'https://voc.iudx.org.in/'
        type:
          - 'iudx:ResourceServer'
        name: Iudx ResourceServer
        description: Multi tenanted IUDX resource server
        tags:
          - IUDX
          - Resource
          - Server
          - Platform
        cos: 26d33603-c0bb-4ea0-85f8-4017020597ce
        owner: 37d33603-c0bb-4ea0-85f8-4017031686df
        resourceServerOrg:
          name: iudx
          additionalInfoURL: 'https://iudx.org.in'
          location:
            type: Place
            address: 'IISc, Bangalore'
            geometry:
              type: Point
              coordinates:
                - 77.570423
                - 13.013945
        resourceServerRegURL: example.iudx.io
        resourceAccessModalities:
          - protocol: http
            accessURL: rs
            type:
              - 'iudx:HTTPAccess'
          - protocol: amqps
            accessURL: databroker
            type:
              - 'iudx:StreamingAccess'
          - protocol: ftp
            accessURL: file
            type:
              - 'iudx:FileAccess'
        location:
          type: Place
          address: 'IISc, Bangalore'
          geometry:
            type: Point
            coordinates:
              - 77.570423
              - 13.013945
    exampleEntityProvider:
      type: object
      title: provider entity
      description: An example entity without ID (For first time onboarding)
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        resourceServer:
          type: string
          format: uuid
        description:
          type: string
        providerUserId:
          type: string
          format: uuid
        providerOrg:
          type: string
      required:
        - type
        - name
        - resourceServer
        - description
        - providerUserId
        - providerOrg
      example:
        '@context': 'https://voc.iudx.org.in/'
        type:
          - 'iudx:Provider'
        name: IudxProvider
        resourceServer: '{{UUID}}'
        description: provider id for uuid test
        providerUserId: UUID
        providerOrg:
          name: Datakaveri
          additionalInfoURL: 'https://datakaveri.org'
          location:
            type: Place
            address: IIsc
            geometry:
              type: Point
              coordinates:
                - 75.92
                - 14.5
    exampleEntityResourceGroup:
      type: object
      title: resource group entity
      description: An example entity without ID (For first time onboarding)
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        provider:
          type: string
          format: uuid
      required:
        - type
        - name
        - description
        - tags
        - provider
      example:
        '@context': 'https://voc.iudx.org.in/'
        type:
          - 'iudx:ResourceGroup'
          - 'iudx:IssueReporting'
        name: agra-swachhata-apps
        description: 'Civic Issues like open defecation, garbage dumping, etc., reported in Agra city via Swachhata app. Publishes all the complaints/issues lodged on the current day, on a daily basis.'
        tags:
          - swachhata
          - complaints
          - reporting
          - issue
          - garbage dump
          - debris removal
          - open defecation
          - construction material
          - requests
        provider: '{{UUID}}'
    exampleEntityResource:
      type: object
      title: resource entity
      description: An example entity without ID (For first time onboarding)
      properties:
        '@context':
          type: string
        type:
          type: array
          items:
            type: string
        name:
          type: string
        label:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        apdURL:
          type: string
        accessPolicy:
          type: string
        resourceServer:
          type: string
          format: uuid
        provider:
          type: string
          format: uuid
        resourceGroup:
          type: string
          format: uuid
      required:
        - type
        - name
        - label
        - description
        - tags
        - apdURL
        - accessPolicy
        - resourceServer
        - provider
        - resourceGroup
      example:
        '@context': 'https://voc.iudx.org.in/'
        type:
          - 'iudx:Resource'
          - 'iudx:PointOfInterest'
        name: wifi-location
        label: Wi-Fi Locations in Pimpri-Chinchwad City
        description: The physical coordinates of Wi-Fi system locations in Pimpri-Chinchwad city.
        tags:
          - Wi-Fi
          - Wi-Fi zone
          - hotspot
          - internet
          - Wi-Fi access
          - Wi-Fi location
          - wireless internet
          - internet access
        apdURL: rs.apd.iudx.org.in
        accessPolicy: SECURE
        resourceServer: '{{uuid}}'
        provider: '{uuid}}'
        resourceGroup: '{{uuid}}'
    unAuthorizedAccess:
      type: object
      title: Common to unauthorized access response
      description: Response for 401 invalid token
      properties:
        type:
          type: string
          description: |
            Indicates that the token sent in request header is invalid
        title:
          description: A human readable title to the message response
        detail:
          type: string
          description: Detailed description of the type or response
      required:
        - type
      example:
        type: 'urn:dx:cat:InvalidAuthorizationToken'
        title: Token is invalid
        detail: 'failed to decode/validate jwt token : Invalid format for JWT'
    relSearchErrorResponse:
      type: object
      title: Response for bad request
      description: Invalid value in the query param
      properties:
        type:
          type: string
          description: |
            Indicates that the syntax in request query param is invalid
        title:
          description: A human readable title to the message response
      required:
        - type
      example:
        type: 'urn:dx:cat:InvalidSyntax'
        title: Invalid Syntax
    successResponseForRelationship:
      type: object
      title: Response for relationship search - Get resourceGroup for resource
      description: Given the type of relationship is Provider mentioned in query param
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          type: string
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 1
        results:
          - '@context': 'https://voc.iudx.org.in/'
            type:
              - 'iudx:ResourceGroup'
              - 'iudx:IssueReporting'
            name: agra-swachhata-apps
            description: 'Civic Issues like open defecation, garbage dumping, etc., reported in Agra city via Swachhata app. Publishes all the complaints/issues lodged on the current day, on a daily basis.'
            tags:
              - swachhata
              - complaints
              - reporting
              - issue
              - garbage dump
              - debris removal
              - open defecation
              - construction material
              - requests
            provider: '{{UUID}}'
    successResponseForRelationship2:
      type: object
      title: Response for relationship search - Get all parents for resourceGroup
      description: Given the type of relationship is Provider mentioned in query param
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          type: string
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 4
        results:
          - '@context': 'https://voc.iudx.org.in/'
            type:
              - 'iudx:ResourceGroup'
              - 'iudx:IssueReporting'
            name: agra-swachhata-apps
            description: 'Civic Issues like open defecation, garbage dumping, etc., reported in Agra city via Swachhata app. Publishes all the complaints/issues lodged on the current day, on a daily basis.'
            tags:
              - swachhata
              - complaints
              - reporting
              - issue
              - garbage dump
              - debris removal
              - open defecation
              - construction material
              - requests
            provider: '{{UUID}}'
          - '@context': 'https://voc.iudx.org.in/'
            type:
              - 'iudx:Provider'
            name: IudxProvider
            resourceServer: '{{UUID}}'
            description: provider id for uuid test
            providerUserId: UUID
            providerOrg:
              name: Datakaveri
              additionalInfoURL: 'https://datakaveri.org'
              location:
                type: Place
                address: IIsc
                geometry:
                  type: Point
                  coordinates:
                    - 75.92
                    - 14.5
          - '@context': 'https://voc.iudx.org.in/'
            type:
              - 'iudx:ResourceServer'
            name: Iudx ResourceServer
            description: Multi tenanted IUDX resource server
            tags:
              - IUDX
              - Resource
              - Server
              - Platform
            cos: 26d33603-c0bb-4ea0-85f8-4017020597ce
            owner: 37d33603-c0bb-4ea0-85f8-4017031686df
            resourceServerOrg:
              name: iudx
              additionalInfoURL: 'https://iudx.org.in'
              location:
                type: Place
                address: 'IISc, Bangalore'
                geometry:
                  type: Point
                  coordinates:
                    - 77.570423
                    - 13.013945
            resourceServerRegURL: example.iudx.io
            resourceAccessModalities:
              - protocol: http
                accessURL: rs
                type:
                  - 'iudx:HTTPAccess'
              - protocol: amqps
                accessURL: databroker
                type:
                  - 'iudx:StreamingAccess'
              - protocol: ftp
                accessURL: file
                type:
                  - 'iudx:FileAccess'
            location:
              type: Place
              address: 'IISc, Bangalore'
              geometry:
                type: Point
                coordinates:
                  - 77.570423
                  - 13.013945
          - '@context': 'https://voc.iudx.org.in/'
            type:
              - 'iudx:COS'
            name: cos.cop.iudx.org.in
            owner: <owner-id>
            description: COS Smart Kalyan-Dombivli Development Corporation Limited
            cosURL: kdmc.cop-nec.iudx.org.in
            cosUI: 'https://catalogue.kdmc.cop-nec.iudx.org.in/'
    errorResponseForRelationship:
      type: object
      title: Indicates bad request
      description: Error response due to invalid query param
      properties:
        type:
          type: string
          description: |
            Error response due to invalid query param in the request
        title:
          description: A human readable title to the message response
      required:
        - type
    successResponseCreateInstance:
      type: object
      title: Response for list with instance type
      description: Example response for list types
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        results:
          - id: Bengaluru
            method: insert
            title: 'urn:dx:cat:Success'
    errorResponseForCreateInstance:
      type: object
      title: Response for bad request
      description: Invalid id in query param
      properties:
        type:
          type: string
          description: |
            Indicates that the id sent in request is invalid
        title:
          description: A human readable title to the message response
        detail:
          type: string
          description: Detailed description of the type or response
      required:
        - type
      example:
        type: 'urn:dx:cat:InvalidSyntax'
        title: Invalid Syntax
        detail: id not present in the request
    successResponseForGetInstance:
      type: object
      title: Response for getting instance
      description: Example success response for getting DX Catalogue instances
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 9
        results:
          - '10'
          - abcd
          - bengaluru
          - mumbai
          - poone
          - pune
          - stqc
          - surat
    successResponseForDeleteInstance:
      type: object
      title: Response for list with instance type
      description: Example response for list types
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered
        title:
          type: string
          description: A human readable title to the message response
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          - id: Bengaluru
            method: delete
            title: 'urn:dx:cat:Success'
    errorResponseForDeleteInstance:
      type: object
      title: Response for bad request
      description: Invalid item type in the given request
      properties:
        type:
          type: string
          description: |
            Indicates that the item type sent in request path param is invalid
        title:
          description: A human readable title to the message response
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:ItemNotFound'
        title: Item is not found
        results:
          - id: Abcd
            method: delete
            title: failed
            detail: 'Fail: Doc doesn''t exist, can''t delete'
    exampleRating:
      type: object
      title: Root Type for exampleRating
      description: An example rating object for a resource
      properties:
        rating:
          type: number
        comment:
          type: string
      example:
        rating: 4.3
        comment: some-comment
    successResponseForConsumerRating:
      type: object
      title: Response for list with instance type
      description: Example response for list types
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered
        title:
          type: string
          description: A human readable title to the message response
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          - id: b8e43a3895373412725cd557730bcf8c6c60019b8092761a66248a927784cfbe
            method: insert
            title: 'urn:dx:cat:Success'
    errorResponseForConsumerRating:
      type: object
      title: Response for bad request
      description: Invalid item type in the given request
      properties:
        type:
          type: string
          description: |
            Indicates that the item type sent in request path param is invalid
        title:
          description: A human readable title to the message response
        detail:
          type: string
          description: Detailed description of the type or response
      required:
        - type
    successResponseForUpdateRating:
      type: object
      title: Response for update rating
      description: Example response for consumer update rating
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered
        title:
          type: string
          description: A human readable title to the message response
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          - id: b8e43a3895373412725cd557730bcf8c6c60019b8092761a66248a927784cfbe
    errorResponseForUpdateRating:
      type: object
      title: Response for bad request
      description: Invalid item type in the given request
      properties:
        type:
          type: string
          description: |
            Indicates that the item type sent in request path param is invalid
        title:
          description: A human readable title to the message response
      required:
        - type
      example:
        type: 'urn:dx:cat:InvalidSchema'
        title: Invalid Schema
    successResponseGetRating:
      type: object
      title: Success response for get rating
      description: Example response for get ratings
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 1
        results:
          - rating: 4.8
            id: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information/surat-itms-live-eta
    successResponseAvgRating:
      type: object
      title: Success response for average rating
      description: Example response for get average ratings
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 6
        results:
          - id: datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.io/pune-env-flood/FWR053
            totalRatings: '1'
            average_rating: 4.099999904632568
          - id: datakaveri.org/04a15c9960ffda227e9546f3f46e629e1fe4132b/rs.iudx.io/pune-env-flood/FWR057
            totalRatings: '1'
            average_rating: 4.599999904632568
    successResponseForDeleteRatingObject:
      type: object
      title: Success response for delete rating object
      description: Example response for delete rating object
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          - id: b8e43a3895373412725cd557730bcf8c6c60019b8092761a66248a927784cfbe
    exampleInstance:
      type: object
      title: Root Type for exampleInstance
      description: An example instance object of middle layer.
      properties:
        name:
          type: string
          description: name of the instance
        cover:
          type: string
          description: URL of the image
        icon:
          type: string
          description: URL of the image
        logo:
          type: string
          description: URL of the image
      example:
        name: lucknow
        cover: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/lucknow.jpg'
        icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/lucknow.jpg'
        logo: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/logo/lucknow.jpg'
    successResponseForCreatingInstance:
      type: object
      title: Response for creating an instance
      description: Example success response for creating the given instance
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          - id: 191e35e3-99c2-43a5-ba8d-811a756b08de
            detail: Instance created Successfully
    errorResponseForCreatingInstance:
      type: object
      title: Example Response for creating or updating an instance or a domain or a geoquery
      description: Invalid or missing payload field in the given request
      properties:
        type:
          type: string
          description: |
            Indicates Invalid or missing payload field in the given request
        title:
          description: A human readable title to the message response
      required:
        - type
      example:
        type: 'urn:dx:cat:InvalidSchema'
        title: Invalid Schema
        detail: The Schema of requested body is invalid.
    successResponseForUpdatingInstance:
      type: object
      title: Response for updating an instance
      description: Example success response for updating the given instance
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          - id: 191e35e3-99c2-43a5-ba8d-811a756b08de
            detail: Instance Updated Successfully
    successResponseForGettingInstance:
      type: object
      title: Response for getting an instance
      description: Example success response for getting instance
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 1
        results:
          - cover: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/lucknow.jpeg'
            instanceId: 191e35e3-99c2-43a5-ba8d-811a756b08de
            name: lucknow
            icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/lucknow.jpeg'
            logo: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/logo/lucknow.jpeg'
    successResponseForDeletingInstance:
      type: object
      title: Response for deleting an instance
      description: Example success response for deleting instance
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          - id: 191e35e3-99c2-43a5-ba8d-811a756b08de
            detail: Instance deleted Successfully
    exampleDomain:
      type: object
      title: Root Type for exampleDomain
      description: An example domain object of middle layer.
      properties:
        description:
          type: string
          description: Description about the domain
        icon:
          type: string
          description: URL of the image
        label:
          type: string
          description: type or tag of the domain
        name:
          type: string
          description: Domain name
      example:
        description: Data Models that pertain to civic domain
        icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/civic.png'
        label: Civic
        name: civic
    successResponseForCreatingDomain:
      type: object
      title: Response for creating a domain
      description: Example success response for creating a domain
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          - id: 3d73067f-2855-4155-b918-14d621b7a576
            detail: domain Created Successfully
    successResponseForUpdatingDomain:
      type: object
      title: Response for updating a domain
      description: Example success response for updating a domain
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          - id: 3d73067f-2855-4155-b918-14d621b7a576
            detail: Domain Updated Successfully
    successResponseForGettingDomain:
      type: object
      title: Response for getting a domain
      description: Example success response for getting a domain
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 2
        results:
          - icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/environment.png'
            name: environment
            description: Data Models that pertain to environment domain
            label: Environment
            domainId: 143db678-0816-4bb5-999d-b62ac0ca1b4b
          - icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/civic.jpeg'
            name: civic
            description: Data Models that pertain to civic domain
            label: Civic
            domainId: 3d73067f-2855-4155-b918-14d621b7a576
    successResponseForDeletingDomain:
      type: object
      title: Response for deleting a domain
      description: Example success response for deleting a domain
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          - id: 3d73067f-2855-4155-b918-14d621b7a576
            detail: Domain deleted Successfully
    successResponseForUIProvider:
      type: object
      title: Response for list of providers
      description: Example success response for the User Interface Provider with ID
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 10
        results:
          - description: UI Test Provider-other
            id: 9760a820-85b0-40df-b6b0-73d3d1848109
    exampleReqBodyMapView:
      type: object
      title: Root Type for exampleReqBodyMapView
      description: An example of requeted body of geoquery
      properties:
        id:
          type: array
          description: dataset_id's of resource group whose location is needed
          items:
            type: string
        instance:
          type: string
          description: name of the city/town from where the dataset belongs to
      example:
        id:
          - 8b95ab80-2aaf-4636-a65e-7f2563d0d371
          - 83c2e5c2-3574-4e11-9530-2b1fbdfce832
        instance: surat
    successResponseForGettingGeoquery:
      type: object
      title: Response for getting dataset locations.
      description: Example success response for getting locations
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 3
        results:
          - instance: pune
            location:
              address: Agra
              type: Place
            label: Civic Issues Reported from Swachhata App in Agra city
            id: datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/agra-swachhata-app
            doc_id: 29JqFYUBeAMS8LEaZWtM
    successResponseForGettingDatasets:
      type: object
      title: Response for getting dataset locations.
      description: Example success response for getting datasets
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        totalHits:
          type: integer
          description: Total number of documents which matched the query.
          format: int32
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        totalHits: 191
        results:
          - instance: pune
            provider: 7b8ecc32-650f-485a-a0c8-64e340bb084f
            label: Civic Issues Reported from Swachhata App in Agra city
            id: b268d727-187d-4c78-a4c1-acde99b97ebb
            accessPolicy: SECURE
            tags:
              - swachhata
              - complaints
              - reporting
              - issue
            icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/pune.jpg'
            providerDescription: UI Test Provider-other
            totalResources: 1
    exampleReqBodyDatasetById:
      type: object
      title: Root Type for exampleReqBodyDatasetById
      description: An example of requeted body of dataset API when field is id
      properties:
        id:
          type: string
          description: dataset_id of resource group that need to be retrieved
      example:
        id: 8b95ab80-2aaf-4636-a65e-7f2563d0d371
    exampleReqBodyDatasetByAllField:
      type: object
      title: Root Type for exampleReqBodyDatasetByAllField
      description: An example of requested body of dataset API when fields are tags, instance and providers.
      properties:
        id:
          type: string
          description: dataset_id of resource group that need to be retrieved
        tags:
          type: array
          description: data models based on which datasets need to be filtered
          items:
            type: string

        instance:
          type: string
          description: instance from where datasets should belong
        providers:
          type: array
          description: provider/providers based on which datasets need to be filtered
          items:
            type: string
        domains:
          type: array
          description: data models based on which datasets need to be filtered
          items:
            type: string

      example:
        id: 8b95ab80-2aaf-4636-a65e-7f2563d0d371
        tags:
          - flood
          - transport
        instance: pune
        providers:
          - bbeacb12-5e54-339d-92e0-d8e063b551a8
          - bbeacb12-5e54-339d-92e0-d8e063b551r9
        domains:
          - itms

    successResponseForGettingDatasetResources:
      type: object
      title: Response for getting dataset based on the dataset_id and its resources.
      description: Example success response for getting datasets based on dataset_id and its resources
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          - dataset:
              provider:
                id: datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f
                description: UI Test Provider-other
              id: datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-env-aqm
              label: Environment
              description: 'Publishes realtime information of air pollutants from AQM sensors/ devices deployed in Pune city. It gives average values of air pollutant measures  like carbon monoxide, nitrogen dioxide, ozone, particulate matter etc., and also the associated environmental factors like temperature, humidity, illuminance over an time interval of 15 minutes. More details on the type of pollutant measured and units of measurement can be seen in the Data Descriptor.'
              accessPolicy: OPEN
              instance: pune
              dataSample:
                uv:
                  avgOverTime: 0.81
              dataSampleFile:
                - relationType: REL_FILE
                  hasObject: 'https://fs-sample-file-bucket.s3.ap-south-1.amazonaws.com/public-access/pune/pune-env-aqm.json'
                  name: Pune air quality monitoring data sample
                  description: Sample file for Air quality monitoring devices/sensors in Pune city
              dataQualityFile:
                - relationType: REL_FILE
                  hasObject: 'https://fs-sample-file-bucket.s3.ap-south-1.amazonaws.com/public-access/pune/DataQuality/puneAQM_Jan22Feb22_DQReport.pdf'
                  name: Pune AQM Data Quality Report Jan-Feb2022
                  description: Data quality report file for Air quality monitoring devices/sensors in Pune city for the time range between Jan-Feb2022.
              dataDescriptor:
                uv:
                  description: Describes instantaneous and/or aggregated values for Ultraviolet (UV) radiation.
                  type:
                    - TimeSeriesAggregation
                  avgOverTime:
                    dataSchema: 'iudx:Number'
                    unitCode: C62
                    description: Average value of UV radiation for the last 15 minutes
                    type:
                      - ValueDescriptor
                schema: 'https://voc.iudx.org.in/EnvAQM'
                totalResources: 1
                instance_icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/pune.jpg'
              resource:
                - resourceId: datakaveri.org/b8bd3e3f39615c8ec96722131ae95056b5938f2f/rs.iudx.io/pune-env-aqm/c37c6979-6802-4a1c-c852-609b7706f5ba
                  label: Environment
                  description: Air quality monitoring devices (Bosch-Climo) in Pune city.
                  dataSample: null
                  dataDescriptor: null
                  resourceType: null
    errorResponseForObjectNotFound:
      type: object
      title: Response for bad request
      description: Object with the given id is not found
      properties:
        type:
          type: string
          description: |
            Indicates that the object belonging to the given id is not found.
        title:
          description: A human readable title to the message response
        detail:
          description: A human readable title to the message response saying the object is not present.
      required:
        - type
      example:
        type: 'urn:dx:cat:ItemNotFound'
        title: Item is not found
        detail: object belonging to Id requested is not present
    successResponseForPopularDatasets:
      type: object
      title: Response for getting dataset locations.
      description: Example success response for getting datasets
      properties:
        type:
          type: string
          description: |
            URN type of the response indicating if the query was successful or if any errors have
            been triggered.
        title:
          description: A human readable title to the message response.
        results:
          type: array
          description: Results which matched the query. This is an array of objects.
          items:
            type: object
      required:
        - type
      example:
        type: 'urn:dx:cat:Success'
        title: Success
        results:
          totalInstance: 4
          totalDomain: 1
          totalPublishers: 10
          totalDatasets: 191
          totalResources: 994
          domains:
            - icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/environment.png'
              name: environment
              description: Data Models that pertain to environment domain
              label: Environment
              domainId: 143db678-0816-4bb5-999d-b62ac0ca1b4b
          instance:
            - cover: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/covers/agartala.jpg'
              name: agartala
              icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/agartala.jpg'
          featuredDataset:
            - itemCreatedAt: '2020-09-28T08:07:06+0530'
              instance: surat
              provider: Administrator of the IUDX platform
              description: Realtime information for tracking public transit buses in Surat city.
              label: Surat Realtime Bus Position Info
              accessPolicy: SECURE
              id: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/surat-itms-realtime-information
              type:
                - 'iudx:ResourceGroup'
                - 'iudx:TransitManagement'
              totalResources: 1
              icon: 'https://iudx-catalogue-assets.s3.ap-south-1.amazonaws.com/instances/icons/surat.jpeg'
          latestDataset:
            - itemCreatedAt: '2023-03-09T09:08:20+0530'
              instance: surveyofindia
              provider: Administrator of the IUDX platform
              description: 'GIS Layers for roads, railways, water bodies and streams, vegetation and surveyed buildings in Bangalore'
              label: Features of interest in Bangalore
              id: iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/geoserver.iudx.io/bangalore_features_of_interest
              accessPolicy: SECURE
              type:
                - 'iudx:ResourceGroup'
                - 'iudx:FeaturesOfInterest'
              totalResources: 6
              icon: null
    errorResponseForNlpSearch:
      type: object
      title: Root Type for standardResponse
      description: Standard Response for all requests
      properties:
        type:
          type: string
          description: |
            Type of the response indicating if the query was successful or if any errors have been triggered.
        title:
          description: A human readable title to the message response.
        detail:
          type: string
          description: Detailed description of the type or response
      required:
        - type
      example:
        type: 'urn:dx:cat:ItemNotFound'
        title: Item is not found
        detail: Failed to find coordinates
