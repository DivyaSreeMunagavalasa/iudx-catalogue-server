{
	"info": {
		"_postman_id": "e1ed3d64-b579-4173-9cc8-addc961edbcb",
		"name": "iudx-catalogue-server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Search APIs",
			"item": [
				{
					"name": "Relationship Search",
					"item": [
						{
							"name": "200 (success) - Search a relationship 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/relsearch?relationship=\"[provider.name]\"&value=\"[[IUDXAdmin]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"relsearch"
									],
									"query": [
										{
											"key": "relationship",
											"value": "\"[provider.name]\""
										},
										{
											"key": "value",
											"value": "\"[[IUDXAdmin]]\""
										}
									]
								},
								"description": "Relationship Search 1 Success"
							},
							"response": []
						},
						{
							"name": "200 (success) - Search a relationship 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/relsearch?value=\"[[openAPI]]\"&relationship=\"[resourceGroup.accessObjectInfo.accessObjectType]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"relsearch"
									],
									"query": [
										{
											"key": "limit",
											"value": "50",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "100",
											"disabled": true
										},
										{
											"key": "value",
											"value": "\"[[openAPI]]\""
										},
										{
											"key": "relationship",
											"value": "\"[resourceGroup.accessObjectInfo.accessObjectType]\""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Geo-Spatial Search",
					"item": [
						{
							"name": "Point (Circle) Search",
							"item": [
								{
									"name": "200 (success) - Search based on circle",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle InvalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=abc&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "abc"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712ab]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712ab]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=abc&georel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "abc"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle InvalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?abcgeoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&abgeorel=intersects&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "abgeorel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request) - Search based on circle invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=intersects&maxDistance=5000&geometryabc=Point&coordinates=[73.927285,18.502712]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometryabc",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid request)- precision validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=1000&geometry=Point&coordinates=[73.9272851,18.5027121]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "1000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.9272851,18.5027121]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate pair",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=100&geometry=Point&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "100"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- maxDistance Limit",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=50000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "50000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request) Negative maxDistance",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=-5000&geometry=Point&coordinates=[73.927285,18.502712]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "-5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value": "[73.927285,18.502712]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate Infinity Check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123732321414141312354253636345241312373232141414131235425363634524131237323214141413123542536363452413123.927285,18.502712]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "maxDistance",
													"value": "5000"
												},
												{
													"key": "geometry",
													"value": "Point"
												},
												{
													"key": "coordinates",
													"value
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Polygon Search",
							"item": [
								{
									"name": "200 (success) - Search Polygon",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Polygon invalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=abclocation&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "abclocation"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Polygon invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=1within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "1within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Polygon invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[abc73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[abc73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Polygon invalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?abcgeoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Polygon invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&abcgeorel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "abcgeorel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Polygon invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&abccoordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "abccoordinates",
													"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request) precision validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9324532,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9324532,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 ( Invalid request)- Coordinates Pair",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordiante infinity check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "Polygon"
												},
												{
													"key": "coordinates",
													"value
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "LineString Search",
							"item": [
								{
									"name": "200 (success) - Search Line String",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Line String invalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=abclocation&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "abclocation"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Line String invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=abcintersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "abcintersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Line String invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[abc73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[abc73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Line String invalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?abcgeoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "abcgeoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Line String invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&abcgeorel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "abcgeorel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Line String invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&abccoordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "abccoordinates",
													"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid Request)- Precision validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.8745374,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[73.8745374,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate pair",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=LineString&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate inifinity check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=intersects&geometry=LineString&coordinates
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "intersects"
												},
												{
													"key": "geometry",
													"value": "LineString"
												},
												{
													"key": "coordinates",
													"value
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bbox Search",
							"item": [
								{
									"name": "200 (success) - Search Bbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.8420,18.5305],[73.8665,18.5126]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.8420,18.5305],[73.8665,18.5126]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Bbox invalidValue-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location1&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location1"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Bbox invalidValue-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=withinab&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "withinab"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid value) - Search Bbox invalidValue-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[sb73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[sb73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Bbox invalidSyntax-1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geopropertyabc=location&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geopropertyabc",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Bbox invalidSyntax-2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georelan=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georelan",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (invalid syntax) - Search Bbox invalidSyntax-3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinatesan=[[73.874537,18.528311],[73.874537,18.528311]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinatesan",
													"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Precision validation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73.84231220,18.5305],[73.8665,18.5126]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[73.84231220,18.5305],[73.8665,18.5126]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate pair",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates=[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value": "[[[75.9,14.5],[72,13],[73,20],[76.9,14.5],[76.9,14.5],[72,13],[73,20],[71.9,14.5],[79.9,14.5],[72,13],[73,20],[76.9,14.5],[71.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 (Invalid request)- Coordinate infinity check",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Check response header\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check response body\", function () {    \r",
													"    const body = pm.response.json();\r",
													"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=bbox&coordinates
											"protocol": "http",
											"host": [
												"{{host}}{{base}}"
											],
											"path": [
												"search"
											],
											"query": [
												{
													"key": "geoproperty",
													"value": "location"
												},
												{
													"key": "georel",
													"value": "within"
												},
												{
													"key": "geometry",
													"value": "bbox"
												},
												{
													"key": "coordinates",
													"value
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Text Search",
					"item": [
						{
							"name": "200 (success) - Text Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Bosch Climo\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch Climo\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Text Search Special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Bosch*\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch*\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid value) - Text Search Special character",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=.\"dss$%fdd&\"&limit=50&offset=100",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": ".\"dss$%fdd"
										},
										{
											"key": "\"",
											"value": null
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Text Search",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?abc123=\"text to search\"&limit=50&offset=100",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "abc123",
											"value": "\"text to search\""
										},
										{
											"key": "limit",
											"value": "50"
										},
										{
											"key": "offset",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Search string size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Goliber Square Sivaji chowk Maharashtra near Railway station aqm pollution sensor iudx iudxadmin resource\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Goliber Square Sivaji chowk Maharashtra near Railway station aqm pollution sensor iudx iudxadmin resource\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Bosch Climo\"&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch Climo\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed limit value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Bosch Climo\"&limit=1000000",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch Climo\""
										},
										{
											"key": "limit",
											"value": "1000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Request)- Exceed offset value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Bosch Climo\"&limit=100&offset=100000",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Bosch Climo\""
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "100000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tag Search",
					"item": [
						{
							"name": "200 (success) - Tag Search (filter,limit,offset)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,tags]&limit=100&offset=0",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,tags]"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Tag Search multi value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=[tags]&value=[[pollution, flood]]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[tags]"
										},
										{
											"key": "value",
											"value": "[[pollution, flood]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - Tag Search 2 (filter,limit,offset)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value) - Tag Search 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[abc123]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[abc123]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value) - Tag Search 2 multi value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=[tags]&value=[[abc, abc123]]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[tags]"
										},
										{
											"key": "value",
											"value": "[[abc, abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Tag Search 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=[abc]&value=[[abc123]]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[abc]"
										},
										{
											"key": "value",
											"value": "[[abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (invalid syntax) - Tag Search 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=[abc]&value=[[abc, abc123]]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[abc]"
										},
										{
											"key": "value",
											"value": "[[abc, abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]&limit=100&offset=0",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed limit value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,name,tags,deviceId]&limit=1000000&offset=0",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId]"
										},
										{
											"key": "limit",
											"value": "1000000"
										},
										{
											"key": "offset",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Request)- Exceed offset value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[pollution]]\"&filter=[id,name,tags,deviceId]&limit=100&offset=1000000",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[pollution]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId]"
										},
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "1000000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Attribute Search",
					"item": [
						{
							"name": "200 (success) - SimpleAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[id]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - SimpleAttribute MultiValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[id]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/aqm-bosch-climo/Blue Diamond Square (Hotel Taj)_10]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/aqm-bosch-climo/Blue Diamond Square (Hotel Taj)_10]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - MultiAttribute MultiValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags,deviceId]\"&value=\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags,deviceId]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - NestedAttributeSearch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags,location.address]\"&value=\"[[aqm, flood], [pune,delhi]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags,location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm, flood], [pune,delhi]]\""
										},
										{
											"key": "filter",
											"value": "[deviceModelInfo.name]",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value) - Non existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[id]\"&value=\"[[non-existing-id]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[non-existing-id]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid value)  - SimpleAttribute MultiValue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[id]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid property) - InvalidProperty-1 SimpleAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[non-existing property]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[non-existing property]\""
										},
										{
											"key": "value",
											"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (invalid property) - InvalidProperty-2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 1\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body 2\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=[abc]&value=[[abc, abc123]]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "[abc]"
										},
										{
											"key": "value",
											"value": "[[abc, abc123]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed property queryParam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[id,name,tags,location,deviceId]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1],[aqm],[pune],[1234]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id,name,tags,location,deviceId]\""
										},
										{
											"key": "value",
											"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1],[aqm],[pune],[1234]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed value pair queryParam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[id,name,tags,location]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1],[aqm],[pune],[1234]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id,name,tags,location]\""
										},
										{
											"key": "value",
											"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1],[aqm],[pune],[1234]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed Value queryParam",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[id,name,tags,location]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1,sensor2,sensor3,sensor4,sensor5],[aqm],[pune]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id,name,tags,location]\""
										},
										{
											"key": "value",
											"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28],[sensor1,sensor2,sensor3,sensor4,sensor5],[aqm],[pune]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[id]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed limit value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[id]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"&filter=[id,name,tags]&limit=10000000",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags]"
										},
										{
											"key": "limit",
											"value": "10000000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Request)- Exceed offset value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[id]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"&filter=[id,name,tags]&limit=10&offset=1001001",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[id]\""
										},
										{
											"key": "value",
											"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
										},
										{
											"key": "filter",
											"value": "[id,name,tags]"
										},
										{
											"key": "limit",
											"value": "10"
										},
										{
											"key": "offset",
											"value": "1001001"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Complex Search",
					"item": [
						{
							"name": "200 (success) - GeoFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoText",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Golibar Square\"&geoproperty=location&georel=within&geometry=Point&coordinates=[73.878603,18.502865]&maxDistance=500",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[73.878603,18.502865]"
										},
										{
											"key": "maxDistance",
											"value": "500"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoAttribute (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoText (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Golibar Square\"&geoproperty=location&georel=within&geometry=Point&coordinates=[73.878603,18.502865]&maxDistance=500&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Point"
										},
										{
											"key": "coordinates",
											"value": "[73.878603,18.502865]"
										},
										{
											"key": "maxDistance",
											"value": "500"
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								},
								"description": "Success-3 GeoText (filter)"
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeText",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Golibar Square\"&property=\"[tags, deviceId.keyword]\"&value=\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "property",
											"value": "\"[tags, deviceId.keyword]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - AttributeText (filter)",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Golibar Square\"&property=\"[tags, deviceId.keyword]\"&value=\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "property",
											"value": "\"[tags, deviceId.keyword]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm],[2353b250-df9a-4108-8e2c-240955969d7e]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - TagsFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[tags]\"&value=\"[[aqm]]\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[tags]\""
										},
										{
											"key": "value",
											"value": "\"[[aqm]]\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - TextFilter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?q=\"Golibar Square\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "q",
											"value": "\"Golibar Square\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoTextAttribute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&q=\"Chandani Square\"",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "q",
											"value": "\"Chandani Square\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 (success) - GeoTextAttribute (filter)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?property=\"[location.address]\"&value=\"[[pune,delhi]]\"&geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&q=\"Chandani Square\"&filter=[tags,id,location.geometry.coordinates]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "property",
											"value": "\"[location.address]\""
										},
										{
											"key": "value",
											"value": "\"[[pune,delhi]]\""
										},
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "q",
											"value": "\"Chandani Square\""
										},
										{
											"key": "filter",
											"value": "[tags,id,location.geometry.coordinates]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Response filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[id,name,tags,deviceId,resourceServer,provider,location,address,type,itemStatus,authServerInfo]"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid request)- Exceed limit value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name]&limit=10001",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[id,name]"
										},
										{
											"key": "limit",
											"value": "10001"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 (Invalid Request)- Exceed offset value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Check response header\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check response body\", function () {    \r",
											"    const body = pm.response.json();\r",
											"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://{{host}}{{base}}/search?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]&filter=[id,name]&limit=1001&offset=1010101",
									"protocol": "http",
									"host": [
										"{{host}}{{base}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "geoproperty",
											"value": "location"
										},
										{
											"key": "georel",
											"value": "within"
										},
										{
											"key": "geometry",
											"value": "Polygon"
										},
										{
											"key": "coordinates",
											"value": "[[[75.9,14.5],[72,13],[73,20],[75.9,14.5]]]"
										},
										{
											"key": "filter",
											"value": "[id,name]"
										},
										{
											"key": "limit",
											"value": "1001"
										},
										{
											"key": "offset",
											"value": "1010101"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Count APIs",
			"item": [
				{
					"name": "200 (success) - Count Tags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"itemDescription\": \"Live location of solid waste managemet vehicles operating in varanasi\",\r\n    \"@context\": [\r\n        \"http://raw.githubusercontent.com/iudx/iudx-ld/master/data_models/civic/swm/swm_context.json\"\r\n    ],\r\n    \"onboardedBy\": \"Technical consultant at rbccps.org\",\r\n    \"providerId\": \"urn:iudx-catalogue-varanasi:vscl\",\r\n    \"refBaseSchema\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"http://raw.githubusercontent.com/iudx/iudx-ld/master/base_schemas/v0.0.0/resourceItem_schema.json\"\r\n    },\r\n    \"resourceServerGroup\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"urn:iudx-catalogue-varanasi:rs.varanasi.iudx.org.in/varanasi-swm-vehicles\"\r\n    },\r\n    \"createdAt\": {\r\n        \"type\": \"TimeProperty\",\r\n        \"value\": \"Fri Feb 28 07:30:40 UTC 2020\"\r\n    },\r\n    \"refDataModel\": {\r\n        \"value\": \"http://raw.githubusercontent.com/iudx/iudx-ld/master/data_models/civic/swm/civic_swm_vehicle_0.json\",\r\n        \"type\": \"Relationship\"\r\n    },\r\n    \"itemStatus\": {\r\n        \"type\": \"Property\",\r\n        \"value\": \"active\"\r\n    },\r\n    \"resourceServer\": {\r\n        \"type\": \"Relationship\",\r\n        \"value\": \"urn:iudx-catalogue-varanasi:rs.varanasi.iudx.org.in\"\r\n    },\r\n    \"coverageRegion\": {\r\n        \"type\": \"GeoProperty\",\r\n        \"value\": {\r\n            \"address\": \"Varanasi, Uttar Pradesh, India\",\r\n            \"geometry\": {\r\n                \"type\": \"Polygon\",\r\n                \"coordinates\": [\r\n                    [\r\n                        [\r\n                            83.023681640625,\r\n                            25.254322111163436\r\n                        ],\r\n                        [\r\n                            83.00497055053711,\r\n                            25.289559766014474\r\n                        ],\r\n                        [\r\n                            83.00857543945312,\r\n                            25.309269760067775\r\n                        ],\r\n                        [\r\n                            83.04410934448242,\r\n                            25.329752340442084\r\n                        ],\r\n                        [\r\n                            83.05732727050781,\r\n                            25.334251837065878\r\n                        ],\r\n                        [\r\n                            83.05887222290039,\r\n                            25.34635310133767\r\n                        ],\r\n                        [\r\n                            83.01218032836914,\r\n                            25.371327523300355\r\n                        ],\r\n                        [\r\n                            82.94471740722656,\r\n                            25.366674295455695\r\n                        ],\r\n                        [\r\n                            82.93373107910155,\r\n                            25.316408022244975\r\n                        ],\r\n                        [\r\n                            82.94986724853516,\r\n                            25.263016051488446\r\n                        ],\r\n                        [\r\n                            82.96394348144531,\r\n                            25.22668366866147\r\n                        ],\r\n                        [\r\n                            82.97733306884766,\r\n                            25.213017398428725\r\n                        ],\r\n                        [\r\n                            83.01544189453125,\r\n                            25.219850725454755\r\n                        ],\r\n                        [\r\n                            83.023681640625,\r\n                            25.254322111163436\r\n                        ]\r\n                    ]\r\n                ]\r\n            }\r\n        }\r\n    },\r\n    \"authorizationServerInfo\": {\r\n        \"type\": \"Property\",\r\n        \"value\": {\r\n            \"authType\": \"iudx-auth\",\r\n            \"authServer\": \"http://auth.iudx.org.in\"\r\n        }\r\n    },\r\n    \"tags\": {\r\n        \"type\": \"Property\",\r\n        \"value\": [\r\n            \"solid\",\r\n            \"garbage\",\r\n            \"waste\",\r\n            \"management\",\r\n            \"collection\",\r\n            \"vehicle\",\r\n            \"truck\"\r\n        ]\r\n    },\r\n    \"itemType\": \"Resource\",\r\n    \"provider\": {\r\n        \"value\": \"urn:iudx-catalogue-varanasi:vscl\",\r\n        \"type\": \"Relationship\"\r\n    },\r\n    \"dataAttributeList\": {\r\n        \"secure\": [],\r\n        \"open\": [\r\n            \"vehicleNo\",\r\n            \"wardNo\",\r\n            \"dateTime\",\r\n            \"latitude\",\r\n            \"longitude\",\r\n            \"location\"\r\n        ]\r\n    },\r\n    \"resourceId\": {\r\n        \"type\": \"Property\",\r\n        \"value\": \"varanasi-swm-vehicles-live\"\r\n    },\r\n    \"updatedAt\": {\r\n        \"type\": \"TimeProperty\",\r\n        \"value\": \"Fri Feb 28 07:30:40 UTC 2020\"\r\n    }\r\n}"
						},
						"url": {
							"raw": "http://{{host}}{{base}}/count?value=[[pollution]]&property=[tags]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "value",
									"value": "[[pollution]]"
								},
								{
									"key": "property",
									"value": "[tags]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag SingleAttr InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?property=\"[tags]\"&value=\"[[abc123]]\"",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[tags]\""
								},
								{
									"key": "value",
									"value": "\"[[abc123]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag MultiValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?property=[tags]&value=[[pollution, flood]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[tags]"
								},
								{
									"key": "value",
									"value": "[[pollution, flood]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag SingleAttr InvalidMultiValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?property=[tags]&value=[[abc, abc123]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[tags]"
								},
								{
									"key": "value",
									"value": "[[abc, abc123]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Tag InvalidProperty InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?property=[abc]&value=[[abc123]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[abc]"
								},
								{
									"key": "value",
									"value": "[[abc123]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?property=[id]&value=[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[id]"
								},
								{
									"key": "value",
									"value": "[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (success) - Count Attribute SingleProperty MultiValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?property=[id]&value=[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24,  iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Chandani Square_25]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[id]"
								},
								{
									"key": "value",
									"value": "[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Sadhu_Wasvani_Square_24,  iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Chandani Square_25]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute SingleProperty InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?property=[id]&value=[[non-existing-id]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "[id]"
								},
								{
									"key": "value",
									"value": "[[non-existing-id]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute SingleProperty MultiValue with InvalidValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?property=\"[id]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\"",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[id]\""
								},
								{
									"key": "value",
									"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.io/aqm-bosch-climo/BopadiSquare_65,non-existing-id]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute Nested-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?property=\"[tags,deviceId.keyword]\"&value=\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\"",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[tags,deviceId.keyword]\""
								},
								{
									"key": "value",
									"value": "\"[[aqm],[8cff12b2-b8be-1230-c5f6-ca96b4e4e441,climo]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute Nested-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?property=\"[tags,location.address]\"&value=\"[[aqm, flood], [pune,delhi]]\"",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[tags,location.address]\""
								},
								{
									"key": "value",
									"value": "\"[[aqm, flood], [pune,delhi]]\""
								},
								{
									"key": "filter",
									"value": "[deviceModelInfo.name]",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Attribute InvalidProperty (totalHits=0)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 1\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body 2\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"totalHits\", 0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?property=\"[non-existing property]\"&value=\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\"",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "property",
									"value": "\"[non-existing property]\""
								},
								{
									"key": "value",
									"value": "\"[[iisc.ac.in/89a36273d77dac4cf38114fca1bbe64392547f86/rs.iudx.org.in/aqm-bosch-climo/Pune Railway Station_28]]\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count based on Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?q=\"Bosch Climo\"",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "q",
									"value": "\"Bosch Climo\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Text using SpecialChar[*]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?q=\"Bosch*\"",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "q",
									"value": "\"Bosch*\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Text InvalidSyntax-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?q=.\"dss$%fdd&\"&limit=50&offset=100",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "q",
									"value": ".\"dss$%fdd"
								},
								{
									"key": "\"",
									"value": null
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Text InvalidSyntax-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?abc123=\"text to search\"&limit=50&offset=100",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abc123",
									"value": "\"text to search\""
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "offset",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Circle(Point)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}{{base}}/count?geoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.9,18.6]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "maxDistance",
									"value": "5000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[73.9,18.6]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count Circle(Point)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidValue\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}{{base}}/count?geoproperty=location&georel=abc&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "abc"
								},
								{
									"key": "maxDistance",
									"value": "5000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[73.927285,18.502712]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Circle(Point)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}{{base}}/count?abcgeoproperty=location&georel=within&maxDistance=5000&geometry=Point&coordinates=[73.927285,18.502712]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abcgeoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "maxDistance",
									"value": "5000"
								},
								{
									"key": "geometry",
									"value": "Point"
								},
								{
									"key": "coordinates",
									"value": "[73.927285,18.502712]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Polygons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}{{base}}/count?geoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count Polygon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}{{base}}/count?geoproperty=abclocation&georel=within&geometry=Polygon&coordinates=[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "abclocation"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[73.696,18.592],[73.69079,18.391],[73.96,18.3643],[74.09,18.526],[73.8947,18.689830],[73.696,18.592]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Polygon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{host}}{{base}}/count?abcgeoproperty=location&georel=within&geometry=Polygon&coordinates=[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abcgeoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "Polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[73.69697570800781,18.592236436157137],[73.6907958984375,18.391017613499066],[73.96133422851562,18.364300951402384],[74.0924835205078,18.526491895773912],[73.89472961425781,18.689830007518434],[73.69697570800781,18.592236436157137]]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count LineString",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?geoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "LineString"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count LineString",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?geoproperty=abclocation&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "abclocation"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "LineString"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count LineString",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?abcgeoproperty=location&georel=intersects&geometry=LineString&coordinates=[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "abcgeoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "intersects"
								},
								{
									"key": "geometry",
									"value": "LineString"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.836808,18.572797],[73.876484,18.525007]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200(success) - Count Bbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"Success\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?geoproperty=location&georel=within&geometry=bbox&coordinates=[[73,20],[75,18]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[73,20],[75,18]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidValue) - Count Bbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"title\", \"failed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?geoproperty=location1&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geoproperty",
									"value": "location1"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400(invalidSyntax) - Count Bbox",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Check response header\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check response body\", function () {    \r",
									"    const body = pm.response.json();\r",
									"    pm.expect(body).to.have.property(\"status\", \"invalidSyntax\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}{{base}}/count?geopropertyabc=location&georel=within&geometry=bbox&coordinates=[[73.874537,18.528311],[73.874537,18.528311]]",
							"protocol": "http",
							"host": [
								"{{host}}{{base}}"
							],
							"path": [
								"count"
							],
							"query": [
								{
									"key": "geopropertyabc",
									"value": "location"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "bbox"
								},
								{
									"key": "coordinates",
									"value": "[[73.874537,18.528311],[73.874537,18.528311]]"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}